{"metadata":{"roleHeading":"Structure","title":"Factory","role":"symbol","modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"externalID":"s:7FactoryAAV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"symbolKind":"struct"},"kind":"symbol","sections":[],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"],"title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a previously cached value from the specified scope.","type":"text"}]},{"text":"Defining a Factory","level":2,"type":"heading","anchor":"Defining-a-Factory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"type":"codeVoice","code":"ServiceType"},{"text":". To do that we need to extend a Factory ","type":"text"},{"type":"codeVoice","code":"Container"},{"text":" and within","type":"text"},{"text":" ","type":"text"},{"text":"that container we define a new computed variable of type ","type":"text"},{"code":"Factory<ServiceType>","type":"codeVoice"},{"type":"text","text":". The type must be explicitly defined, and is usually a"},{"type":"text","text":" "},{"type":"text","text":"protocol to which the returned dependency conforms."}]},{"code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"codeVoice","code":"callAsFunction()"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}]},{"type":"paragraph","inlineContent":[{"text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"]},{"type":"heading","text":"Transient","anchor":"Transient","level":2},{"inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"type":"text","text":" "},{"text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"been served."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"generated":true,"title":"Default Implementations"}],"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Factory/registration":{"title":"registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","role":"symbol","url":"\/documentation\/factory\/factory\/registration","abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and others."}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","kind":"symbol","type":"topic","title":"FactoryModifying","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","title":"FactoryModifying Implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","abstract":[],"url":"\/documentation\/factory\/factory\/factorymodifying-implementations"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"title":"register(factory:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","role":"symbol","url":"\/documentation\/factory\/factory\/register(factory:)","abstract":[{"text":"Registers a new factory closure capable of producing an object or service of the desired type.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"kind":"symbol","role":"symbol","title":"callAsFunction()"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"ManagedContainer","kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","title":"init(_:key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}],"url":"\/documentation\/factory\/factory\/init(_:key:_:)"},"doc://Factory/documentation/Factory/Factory/resolve()":{"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"resolve()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"url":"\/documentation\/factory\/factory\/resolve()"},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","type":"topic","url":"\/documentation\/factory\/factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"role":"symbol"}}}