{"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"],"type":"conformsTo","kind":"relationships"}],"variants":[{"paths":["\/documentation\/factory\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory","interfaceLanguage":"swift"},"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"title":"Factory","role":"symbol","symbolKind":"struct","roleHeading":"Structure","externalID":"s:7FactoryAAV","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"modules":[{"name":"Factory"}]},"kind":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"]},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"]},{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"title":"Default Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"return a previously cached value from the specified scope."}]},{"level":2,"text":"Defining a Factory","type":"heading","anchor":"Defining-a-Factory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"code":"ServiceType","type":"codeVoice"},{"type":"text","text":". To do that we need to extend a Factory "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" and within"},{"text":" ","type":"text"},{"type":"text","text":"that container we define a new computed variable of type "},{"code":"Factory<ServiceType>","type":"codeVoice"},{"text":". The type must be explicitly defined, and is usually a","type":"text"},{"text":" ","type":"text"},{"text":"protocol to which the returned dependency conforms.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with"},{"type":"text","text":" "},{"text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated","type":"text"},{"type":"text","text":" "},{"text":"(see ","type":"text"},{"code":"callAsFunction()","type":"codeVoice"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"type":"heading","level":2,"text":"Transient","anchor":"Transient"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"text":" ","type":"text"},{"type":"text","text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has"},{"type":"text","text":" "},{"type":"text","text":"been served."}]},{"type":"paragraph","inlineContent":[{"text":"Other operations exist for Factory. See ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"},{"text":".","type":"text"}]}]}],"references":{"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"url":"\/documentation\/factory\/factory\/factorymodifying-implementations","title":"FactoryModifying Implementations","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","abstract":[],"kind":"article","role":"collectionGroup"},"doc://Factory/documentation/Factory/FactoryModifying":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryModifying"}],"url":"\/documentation\/factory\/factorymodifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","title":"FactoryModifying","role":"symbol","type":"topic","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","type":"topic","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","kind":"symbol","title":"Factory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory/resolve()":{"abstract":[{"type":"text","text":"Unsugared resolution function."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","url":"\/documentation\/factory\/factory\/resolve()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve()","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Factory/registration":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"text":" ","type":"text"},{"text":"and others.","type":"text"}],"kind":"symbol","title":"registration","role":"symbol","url":"\/documentation\/factory\/factory\/registration","type":"topic"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","title":"callAsFunction()","type":"topic"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"title":"init(_:key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","type":"topic","url":"\/documentation\/factory\/factory\/init(_:key:_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ManagedContainerP","text":"ManagedContainer"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Public initializer creates a Factory capable of managing dependencies of the desired type."}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","type":"topic","abstract":[{"text":"Registers a new factory closure capable of producing an object or service of the desired type.","type":"text"}],"url":"\/documentation\/factory\/factory\/register(factory:)","kind":"symbol","title":"register(factory:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"kind":"text","text":"("},{"text":"factory","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}]}}}