{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current "},{"type":"emphasis","inlineContent":[{"type":"text","text":"context"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"What if, for example, you "},{"type":"strong","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" want your application’s analytics library to be called when running unit tests?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Piece of cake. Just register a new override for that particular context."}]},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes it easy."}]},{"anchor":"Contexts","level":2,"type":"heading","text":"Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg(String)"}]},{"type":"text","text":" - application is launched with a particular argument."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"args([String])"}]},{"type":"text","text":" - application is launched with one of several arguments."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" - application is running in Xcode Preview mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"debug"}]},{"type":"text","text":" - application is running in Xcode DEBUG mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"simulator"}]},{"type":"text","text":" - application is running within an Xcode simulator"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]},{"type":"text","text":" - application is running on an actual device"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"anchor":"Some-Examples","level":2,"type":"heading","text":"Some Examples"},{"anchor":"-onTest","level":3,"type":"heading","text":"• onTest"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest."}]},{"type":"codeListing","syntax":"swift","code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}]},{"type":"codeListing","syntax":"swift","code":["container.analytics","    .onTest { MockAnalyticsEngine() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}]},{"type":"codeListing","syntax":"swift","code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using onTest is much easier."}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"anchor":"-onPreview","level":3,"type":"heading","text":"• onPreview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews."}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can, of course, still use the mechanisms shown in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews"},{"type":"text","text":"."}]},{"anchor":"-onDebug","level":3,"type":"heading","text":"• onDebug"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"that there’s no "},{"type":"codeVoice","code":"release"},{"type":"text","text":" context. Just use the standard "},{"type":"codeVoice","code":"register"},{"type":"text","text":" syntax in that case."}]}],"type":"aside","name":"Note"},{"anchor":"-onSimulator--onDevice","level":3,"type":"heading","text":"•  onSimulator \/ onDevice"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds."}]},{"anchor":"-onArg","level":3,"type":"heading","text":"• onArg"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change it’s behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing"},{"type":"text","text":" section the test case itself is pretty standard."}]},{"type":"codeListing","syntax":"swift","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"]},{"anchor":"-onArgs","level":3,"type":"heading","text":"• onArgs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed."}]},{"type":"codeListing","syntax":"swift","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"]},{"anchor":"Runtime-Arguments","level":2,"type":"heading","text":"Runtime Arguments"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}]},{"type":"codeListing","syntax":"swift","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"]},{"anchor":"Multiple-Contexts","level":2,"type":"heading","text":"Multiple Contexts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you may have noticed above in the "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of specifying separate services depending on context."}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And here’s an example saying we want the same dependency under multiple contexts."}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which brings us to…"}]},{"anchor":"Context-Precedence","level":2,"type":"heading","text":"Context Precedence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg[s]"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"simulator"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"device"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"debug"}]},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"registered factory"}]},{"type":"text","text":" (if any)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"original factory"}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds."}]},{"anchor":"Global-Context","level":2,"type":"heading","text":"Global Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"onArg"},{"type":"text","text":" and "},{"type":"codeVoice","code":"onDebug"},{"type":"text","text":" and other context modifiers basically define how the app should respond to that particular context."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/contexts"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Contexts","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Contexts","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"references":{"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","type":"topic","url":"\/documentation\/factory\/testing"},"doc://Factory/documentation/Factory/Chains":{"role":"article","title":"Circular Dependency Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","type":"topic","url":"\/documentation\/factory\/chains"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","type":"topic","url":"\/documentation\/factory\/debugging"},"doc://Factory/documentation/Factory/Previews":{"role":"article","title":"SwiftUI Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","type":"topic","url":"\/documentation\/factory\/previews"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}