{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/LazyInjected"]]},"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/lazyinjected\/resolvedornil()"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"text":" ","type":"text"},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"type":"codeListing"}],"kind":"content"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","metadata":{"symbolKind":"method","modules":[{"name":"Factory"}],"externalID":"s:7Factory12LazyInjectedV13resolvedOrNilxSgyF","title":"resolvedOrNil()","role":"symbol","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvedOrNil"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"references":{"doc://Factory/documentation/Factory/LazyInjected/resolvedOrNil()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolvedOrNil"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"title":"resolvedOrNil()","type":"topic","abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"url":"\/documentation\/factory\/lazyinjected\/resolvedornil()","kind":"symbol","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","kind":"symbol","url":"\/documentation\/factory\/lazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","role":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"}}}