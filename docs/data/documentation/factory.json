{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"]},{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]},{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"title":"Additional Topics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"title":"Classes"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"title":"Protocols"},{"title":"Structures","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryKey","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"]},{"title":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"]},{"title":"Type Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"]},{"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"sections":[],"metadata":{"roleHeading":"Framework","role":"collection","title":"Factory","symbolKind":"module","modules":[{"name":"Factory"}],"externalID":"Factory"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Powerful"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performant"}]},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concise"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Flexible","type":"text"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Documented"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Lightweight","type":"text"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Free","type":"text"}],"type":"strong"},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory"},"hierarchy":{"paths":[[]]},"references":{"doc://Factory/documentation/Factory/FactoryContext":{"url":"\/documentation\/factory\/factorycontext","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FactoryContext","kind":"identifier"}],"kind":"symbol","abstract":[],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"title":"FactoryContext"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","title":"ParameterFactory","url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Optionals":{"url":"\/documentation\/factory\/optionals","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","role":"article","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"type":"topic","title":"Optionals and Dynamic Registration"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","title":"Injected","url":"\/documentation\/factory\/injected","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","role":"article","type":"topic","url":"\/documentation\/factory\/modifiers"},"doc://Factory/documentation/Factory/AutoRegistering":{"title":"AutoRegistering","abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"AutoRegistering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AutoRegistering"}],"url":"\/documentation\/factory\/autoregistering","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering"},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"title":"FactoryManagedContainer","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryManagedContainer"}],"navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorymanagedcontainer","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","title":"Designing Factory"},"doc://Factory/documentation/Factory/FactoryKey":{"navigatorTitle":[{"text":"FactoryKey","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryKey"}],"url":"\/documentation\/factory\/factorykey","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryKey","type":"topic","title":"FactoryKey"},"doc://Factory/documentation/Factory/Contexts":{"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"type":"topic","role":"article","title":"Contexts","kind":"article","url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"title":"FactoryAutoRegistering","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryAutoRegistering","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryAutoRegistering"}],"url":"\/documentation\/factory\/factoryautoregistering","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","type":"topic","url":"\/documentation\/factory\/lazyinjected","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"kind":"symbol"},"doc://Factory/documentation/Factory/Previews":{"title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","type":"topic","role":"article"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"title":"FactorySharedContainer","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactorySharedContainer"}],"navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/factorysharedcontainer","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"},"doc://Factory/documentation/Factory/Migration":{"title":"Migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"url":"\/documentation\/factory\/migration","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration"},"doc://Factory/documentation/Factory/Cycle":{"url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","role":"article","kind":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","title":"Resolution Cycles"},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Resolving"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"url":"\/documentation\/factory\/resolving","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving"},"doc://Factory/documentation/Factory/ContainerManager":{"title":"ContainerManager","url":"\/documentation\/factory\/containermanager","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ContainerManager","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","kind":"symbol","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}]},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic","title":"Modular Development"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/FactoryContextType":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"title":"FactoryContextType","type":"topic","url":"\/documentation\/factory\/factorycontexttype"},"doc://Factory/documentation/Factory/Functional":{"url":"\/documentation\/factory\/functional","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","role":"article","kind":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"type":"topic","title":"Functional Injection"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"title":"resolve(_:)","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/factory\/resolve(_:)-632zk","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","title":"WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"type":"topic","url":"\/documentation\/factory\/weaklazyinjected"},"doc://Factory/documentation/Factory/FactoryResolving":{"title":"FactoryResolving","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResolving"}],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresolving","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving"},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","url":"\/documentation\/factory\/container","title":"Container","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","navigatorTitle":[{"kind":"identifier","text":"Container"}],"abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/InjectedType":{"title":"InjectedType","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedType"}],"navigatorTitle":[{"text":"InjectedType","kind":"identifier"}],"url":"\/documentation\/factory\/injectedtype","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"kind":"symbol","url":"\/documentation\/factory\/factoryresetoptions","title":"FactoryResetOptions","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryResetOptions","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"type":"topic","url":"\/documentation\/factory\/managedcontainer","title":"ManagedContainer"},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","url":"\/documentation\/factory\/injectedobject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"title":"InjectedObject","kind":"symbol","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}]},"doc://Factory/documentation/Factory/GettingStarted":{"url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"title":"FactoryContainerManager","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryContainerManager","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryContainerManager"}],"url":"\/documentation\/factory\/factorycontainermanager","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"title":"resolve(_:)","abstract":[{"type":"text","text":"Global function to resolve a keypath on Container.shared into the requested type"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory9ContainerC","text":"Container"},{"kind":"text","text":", "},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/resolve(_:)-52olu","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu"},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","type":"topic","url":"\/documentation\/factory\/factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"role":"symbol"},"doc://Factory/documentation/Factory/Debugging":{"title":"Debugging","url":"\/documentation\/factory\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","type":"topic","role":"article"},"doc://Factory/documentation/Factory/FactoryContainer":{"url":"\/documentation\/factory\/factorycontainer","title":"FactoryContainer","navigatorTitle":[{"kind":"identifier","text":"FactoryContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","role":"symbol","kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","url":"\/documentation\/factory\/testing","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"topic","role":"article"},"doc://Factory/documentation/Factory/FactoryScope":{"title":"FactoryScope","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryScope","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryScope"}],"url":"\/documentation\/factory\/factoryscope","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope"},"doc://Factory/documentation/Factory/SharedContainer":{"title":"SharedContainer","type":"topic","url":"\/documentation\/factory\/sharedcontainer","role":"symbol","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"kind":"symbol"},"doc://Factory/documentation/Factory/FactoryRegistration":{"url":"\/documentation\/factory\/factoryregistration","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","title":"FactoryRegistration","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryRegistration"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://Factory/documentation/Factory/FactoryModifying":{"navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","kind":"symbol","type":"topic","title":"FactoryModifying","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"},"doc://Factory/documentation/Factory/Scopes":{"title":"Scopes","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","role":"collectionGroup","url":"\/documentation\/factory\/scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"kind":"article"},"doc://Factory/documentation/Factory/Tags":{"url":"\/documentation\/factory\/tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","role":"article","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","title":"Tags"},"doc://Factory/documentation/Factory/Containers":{"type":"topic","role":"article","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","title":"Containers","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"url":"\/documentation\/factory\/containers"},"doc://Factory/documentation/Factory/Chains":{"title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","type":"topic","role":"article"}}}