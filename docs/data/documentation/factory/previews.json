{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}]},{"anchor":"SwiftUI-Integrations","level":2,"type":"heading","text":"SwiftUI Integrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["class ContentView: ObservableObject {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes above)."}]},{"anchor":"SwiftUI-Previews","level":2,"type":"heading","text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview."}]},{"type":"codeListing","syntax":"swift","code":["class ContentView: ObservableObject {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"anchor":"Multiple-Previews","level":2,"type":"heading","text":"Multiple Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"]},{"anchor":"InjectedObject","level":2,"type":"heading","text":"InjectedObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you prefer, you can also use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject"},{"type":"text","text":", an immediate injection property wrapper for SwiftUI ObservableObjects."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"type":"text","text":" "},{"type":"text","text":"and @EnvironmentObject."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath"},{"type":"text","text":" "},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service"},{"type":"text","text":" "},{"type":"text","text":"or dependency."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have a service that could be comsumed from a view or a view model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes"},{"type":"text","text":" for more details on graph."}]}]}]},{"anchor":"InjectedObject-Previews","level":2,"type":"heading","text":"InjectedObject Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Single previews work exactly the same."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But due a bug in how Swift manages property wrappers with built in initializers, doing mutlitple previews is just a little different than shown earlier."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing the model to the view directly, we need to create the entire "},{"type":"codeVoice","code":"InjectedObject(model1)"},{"type":"text","text":" pair and pass that."}]},{"anchor":"Common-Setup","level":2,"type":"heading","text":"Common Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/previews"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Previews","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","metadata":{"roleHeading":"Article","title":"SwiftUI Previews","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"references":{"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issus."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","type":"topic","url":"\/documentation\/factory\/debugging"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","title":"InjectedObject","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"url":"\/documentation\/factory\/injectedobject"},"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","type":"topic","url":"\/documentation\/factory\/testing"},"doc://Factory/documentation/Factory/Chains":{"role":"article","title":"Circular Dependency Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","type":"topic","url":"\/documentation\/factory\/chains"},"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","title":"Scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","kind":"article","type":"topic","url":"\/documentation\/factory\/scopes"}}}