{"primaryContentSections":[{"content":[{"level":3,"anchor":"Shared-Class-Container","text":"Shared Class Container","type":"heading"},{"inlineContent":[{"text":"Here we instantiate our dependency from a shared class container.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"anchor":"Initialization-from-Passed-Container","type":"heading","text":"Initialization from Passed Container","level":3},{"inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"level":3,"type":"heading","text":"Lazy Initialization from Passed Container","anchor":"Lazy-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"type":"heading","text":"Injected Property Wrappers","level":3,"anchor":"Injected-Property-Wrappers"},{"inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" and "},{"code":"@LazyInjected","type":"codeVoice"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"type":"codeVoice","code":"EnvironmentObject"},{"text":" in SwiftUI.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","isActive":true,"type":"reference"},{"type":"text","text":", and "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","isActive":true},{"text":" for more.","type":"text"}]},{"text":"Global Keypath Resolution from Shared Container","level":3,"type":"heading","anchor":"Global-Keypath-Resolution-from-Shared-Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"anchor":"Parameterized-Initialization-from-Passed-Container","text":"Parameterized Initialization from Passed Container","level":3,"type":"heading"},{"inlineContent":[{"text":"Passing a required parameter to a factory for resolution.","type":"text"}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true},{"text":" for more details.","type":"text"}]},{"level":3,"type":"heading","text":"Classic Factory from Static Class Member","anchor":"Classic-Factory-from-Static-Class-Member"},{"type":"paragraph","inlineContent":[{"text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"type":"paragraph","inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","isActive":true,"type":"reference"}]},{"anchor":"Composition-Root","text":"Composition Root","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Sample Resolutions","roleHeading":"Article","role":"article","modules":[{"name":"Factory"}]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"seeAlsoSections":[{"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"generated":true}],"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"references":{"doc://Factory/documentation/Factory/GettingStarted":{"url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","role":"collectionGroup","kind":"article","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","title":"ParameterFactory","url":"\/documentation\/factory\/parameterfactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","type":"topic","url":"\/documentation\/factory\/lazyinjected","role":"symbol","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"kind":"symbol"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Injected":{"kind":"symbol","title":"Injected","url":"\/documentation\/factory\/injected","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","url":"\/documentation\/factory\/injectedobject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectedObject","kind":"identifier"}],"abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"title":"InjectedObject","kind":"symbol","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}]},"doc://Factory/documentation/Factory/Registrations":{"abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","url":"\/documentation\/factory\/registrations","type":"topic","role":"article","title":"Sample Registrations","kind":"article"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","title":"WeakLazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WeakLazyInjected"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"type":"topic","url":"\/documentation\/factory\/weaklazyinjected"}}}