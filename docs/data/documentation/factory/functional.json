{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"content":[{"text":"Overview","anchor":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}],"type":"paragraph"},{"level":2,"text":"Example","type":"heading","anchor":"Example"},{"type":"paragraph","inlineContent":[{"text":"Consider the following typealias and Factory.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct."}]},{"type":"paragraph","inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}]},{"syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"],"type":"codeListing"},{"text":"Testing","anchor":"Testing","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Now consider how easy it is to write a test with mock accounts…","type":"text"}]},{"code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Or test edge cases like no accounts found.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or test specific error cases."}]},{"code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","type":"reference","isActive":true}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Functional"},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true}],"sections":[],"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"kind":"article","metadata":{"roleHeading":"Article","title":"Functional Injection","role":"article","modules":[{"name":"Factory"}]},"references":{"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","title":"Factory Modifiers","url":"\/documentation\/factory\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Optionals":{"type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","url":"\/documentation\/factory\/optionals","role":"article"},"doc://Factory/documentation/Factory/Modules":{"type":"topic","url":"\/documentation\/factory\/modules","role":"article","kind":"article","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"type":"text","text":"Factory and Functional Dependency Injection"}],"type":"link","title":"Factory and Functional Dependency Injection","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"role":"article"},"doc://Factory/documentation/Factory/Tags":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","title":"Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"}}}