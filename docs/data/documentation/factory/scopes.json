{"seeAlsoSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Migration"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’ve used Resolver or some other dependency injection system before then you’ve probably experienced the benefits and power of scopes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if not, the concept is easy to understand: Just how long should an instance of an object live?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve no doubt stuffed an instance of a class into a variable and created a singleton at some point in your career. This is an example of a scope. A single instance is created and then used and shared by all of the methods and functions in the app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is easily done in Factory."}]},{"anchor":"Singleton","level":2,"type":"heading","text":"Singleton"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just ask the container for a singleton factory."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var myService: Factory<MyServiceType> { ","        self { MyService() }","            .singleton","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now whenever someone requests an instance of "},{"type":"codeVoice","code":"myService"},{"type":"text","text":" they’ll get the same instance of the object as everyone else."}]},{"anchor":"Unique","level":2,"type":"heading","text":"Unique"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If no scope is specified the default scope is unique. A new instance of the service will be instantiated and returned each and every time one is requested from the factory."}]},{"anchor":"Other-Scopes","level":2,"type":"heading","text":"Other Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other common scopes are "},{"type":"codeVoice","code":"cached"},{"type":"text","text":" and "},{"type":"codeVoice","code":"shared"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Cached items are persisted until the cache is reset, while shared items exist just as long as someone holds a strong reference to them. When the last reference goes away, the weakly held shared reference also goes away."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var cachedService: Factory<MyServiceType> { ","        self { MyService() }.cached","    }","    var sharedService: Factory<MyServiceType> { ","        self { MyService() }.shared","    }","}"]},{"anchor":"Custom-Scopes","level":2,"type":"heading","text":"Custom Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add your own special purpose caches to the mix. Try this."}]},{"type":"codeListing","syntax":"swift","code":["extension Scope {","    static var session = Cached()","}","","extension Container {","    var authenticatedUser: Factory<AuthenticatedUser> { ","        self { AuthenticatedUser() }","            .scope(.session)","    }","    var profileImageCache: Factory<ProfileImageCache> { ","        self { ProfileImageCache() } ","            .scope(.session)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once created, a single instance of "},{"type":"codeVoice","code":"AuthenticatedUser"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ProfileImageCache"},{"type":"text","text":" will be provided to anyone that needs one… up until the point where the session scope is reset, perhaps by a user logging out."}]},{"type":"codeListing","syntax":"swift","code":["func logout() {","    Container.shared.manager.reset(scope: .session)","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scopes are powerful tools to have in your arsenal. Use them."}]},{"anchor":"Graph-Scope","level":2,"type":"heading","text":"Graph Scope"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s one additional scope, called "},{"type":"codeVoice","code":"graph"},{"type":"text","text":". This scope will reuse any factory instances resolved during a given resolution cycle. This can come in handy when a single class implements multiple protocols. Consider the following…"}]},{"type":"codeListing","syntax":"swift","code":["class ProtocolConsumer {","    @Injected(\\.idProvider) var ids","    @Injected(\\.valueProvider) var values","    init() {}","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ProtocolConsumer"},{"type":"text","text":" wants two different protocols. But it doesn’t know that a single class provides both services. (Nor should it care.) Take a look at the referenced factories."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var consumer: Factory<ProtocolConsumer> { self { ProtocolConsumer() } }","    var idProvider: Factory<IDProviding> { self { commonProviding() } }","    var valueProvider: Factory<ValueProviding> { self { commonProviding() } }","    private var commonProviding: Factory<MyService> { graph { MyService() } }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both provider factories reference the same factory. When Factory is asked for an instance of "},{"type":"codeVoice","code":"consumer"},{"type":"text","text":", both providers will receive the same instance of "},{"type":"codeVoice","code":"MyService"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few caveats and considerations for using graph. The first is that anyone who wants to participate in the graph needs to explicitely state as such using the graph scope. Note the scope parameter for "},{"type":"codeVoice","code":"commonProviding"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second is that there needs to be a “root” to the graph."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example, the "},{"type":"codeVoice","code":"consumer"},{"type":"text","text":" object is the root. Factory is asked for a consumer, which in turn requires two providers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you were to instantiate an instance of "},{"type":"codeVoice","code":"ProtocolConsumer"},{"type":"text","text":" yourself, each one of ProtocolConsumer’s Injected property wrappers would initialize sequentually on the same thread, resulting in two separate and distinct resolution cycles."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle"},{"type":"text","text":" for more on this."}]},{"anchor":"Lifecycles","level":2,"type":"heading","text":"Lifecycles"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scope caches are maintained by the Factory’s container."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a container ever goes out of scope, so will all of its registrations and cached objects."}]}],"type":"aside","name":"Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"See the “Releasing a Container” discussion in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers"},{"type":"text","text":" for more information."}]},{"anchor":"Reset","level":2,"type":"heading","text":"Reset"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown above, individual scope caches can be reset (cleared) if needed."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.reset(scope: .cached)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can reset the cache for every scope in a given container."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.reset(options: .scope)"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Resetting a container or scope has no effect whatsoever on anything that’s alreay been resolved by Factory. It only ensures that the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"next"}]},{"type":"text","text":" time a Factory is asked to resolve a dependency that dependency will be a new instance."}]}],"type":"aside","name":"Important"}]}],"variants":[{"paths":["\/documentation\/factory\/scopes"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Scopes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"kind":"article","metadata":{"modules":[{"name":"Factory"}],"role":"collectionGroup","title":"Scopes"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"title":"Scope Class Definitions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Scope","doc:\/\/Factory\/documentation\/Factory\/Scope\/Cached-swift.class","doc:\/\/Factory\/documentation\/Factory\/Scope\/Graph-swift.class","doc:\/\/Factory\/documentation\/Factory\/Scope\/Shared-swift.class","doc:\/\/Factory\/documentation\/Factory\/Scope\/Singleton-swift.class"]}],"references":{"doc://Factory/documentation/Factory/Cycle":{"role":"article","title":"Resolution Cycles","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","type":"topic","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Migration":{"role":"article","title":"Migration","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","kind":"article","type":"topic","url":"\/documentation\/factory\/migration"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory/Scope/Singleton-swift.class":{"role":"symbol","title":"Scope.Singleton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Singleton"}],"abstract":[{"type":"text","text":"Defines the singleton scope. The same instance will always be returned by the factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope\/Singleton-swift.class","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Singleton"}],"url":"\/documentation\/factory\/scope\/singleton-swift.class"},"doc://Factory/documentation/Factory/Containers":{"role":"article","title":"Containers","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","kind":"article","type":"topic","url":"\/documentation\/factory\/containers"},"doc://Factory/documentation/Factory/Scope/Graph-swift.class":{"role":"symbol","title":"Scope.Graph","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Graph"}],"abstract":[{"type":"text","text":"Defines the graph scope. A single instance of a given type will be returned during a given resolution cycle."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope\/Graph-swift.class","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Graph"}],"url":"\/documentation\/factory\/scope\/graph-swift.class"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Scope/Shared-swift.class":{"role":"symbol","title":"Scope.Shared","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Shared"}],"abstract":[{"type":"text","text":"Defines a shared (weak) scope. The same instance will be returned by the factory as long as someone maintains a strong reference."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope\/Shared-swift.class","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"url":"\/documentation\/factory\/scope\/shared-swift.class"},"doc://Factory/documentation/Factory/Scope/Cached-swift.class":{"role":"symbol","title":"Scope.Cached","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cached"}],"abstract":[{"type":"text","text":"Defines a cached scope. The same instance will be returned by the factory until the cache is reset."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope\/Cached-swift.class","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Cached"}],"url":"\/documentation\/factory\/scope\/cached-swift.class"},"doc://Factory/documentation/Factory/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Singleton"},{"type":"text","text":", "},{"type":"codeVoice","code":"Cached"},{"type":"text","text":", "},{"type":"codeVoice","code":"Graph"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":"."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/factory\/scope"}}}