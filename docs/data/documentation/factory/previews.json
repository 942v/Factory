{"sections":[],"kind":"article","metadata":{"title":"SwiftUI Previews","role":"article","modules":[{"name":"Factory"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"generated":true,"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]}],"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look.","type":"text"}],"type":"paragraph"},{"anchor":"SwiftUI-Integrations","text":"SwiftUI Integrations","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"type":"codeVoice","code":"ObservedObject"},{"text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes).","type":"text"}],"type":"paragraph"},{"anchor":"SwiftUI-Previews","type":"heading","level":2,"text":"SwiftUI Previews"},{"inlineContent":[{"type":"text","text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview."}],"type":"paragraph"},{"code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose.","type":"text"}]},{"type":"heading","level":2,"text":"SwiftUI #Previews","anchor":"SwiftUI-Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15 and iOS 17… but there’s a problem. Attempting to do the above gives us an error."}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    ContentView() \/\/ error: Result of 'ContentView' initializer is unused","}"]},{"type":"paragraph","inlineContent":[{"text":"The solution lies in recognizing the fact that the #Preview closure is not a ViewBuilder. To fix it we just need to explicitly return our view.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    return ContentView()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or we could simply turn the expression into a ViewBuilder using our old friend, Group."}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Group actually has a few additional uses…"}]},{"text":"Multiple Previews","level":2,"anchor":"Multiple-Previews","type":"heading"},{"inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"]},{"inlineContent":[{"text":"Of course, it’s even easier with #Preview.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"]},{"inlineContent":[{"text":"Since #Preview has been back-ported to iOS 13, I’d use it from now on. (Assuming of course that you can migrate your project to Xcode 15.)","type":"text"}],"type":"paragraph"},{"text":"InjectedObject","type":"heading","anchor":"InjectedObject","level":2},{"type":"paragraph","inlineContent":[{"text":"Should you prefer, you can also use ","type":"text"},{"type":"codeVoice","code":"InjectedObject"},{"type":"text","text":", an immediate injection property wrapper for SwiftUI ObservableObjects."}]},{"inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"text":" ","type":"text"},{"type":"text","text":"and @EnvironmentObject."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath"},{"type":"text","text":" "},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}],"type":"paragraph"},{"syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or dependency."}]},{"type":"codeListing","code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"InjectedObject is also handy when…","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have a service that could be consumed from a view or a view model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","isActive":true},{"type":"text","text":" for more details on graph."}]}]}]},{"level":2,"anchor":"InjectedObject-Previews","type":"heading","text":"InjectedObject Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Single previews work exactly the same."}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"inlineContent":[{"type":"text","text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Instead of passing the model to the view directly, we need to create the entire ","type":"text"},{"type":"codeVoice","code":"InjectedObject(model1)"},{"text":" pair and pass that.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, and as we’ve shown before, it’s even easier with #Preview."}]},{"type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"],"syntax":"swift"},{"level":2,"anchor":"Common-Setup","text":"Common Setup","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/previews"]}],"references":{"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"title":"Testing","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"type":"topic","role":"article","url":"\/documentation\/factory\/chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","title":"Circular Dependency Chains"},"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","kind":"article","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"title":"Scopes","url":"\/documentation\/factory\/scopes","type":"topic"},"doc://Factory/documentation/Factory/Contexts":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"title":"Contexts","url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","type":"topic"}}}