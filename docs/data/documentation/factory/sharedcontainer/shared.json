{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared"},"metadata":{"roleHeading":"Type Property","symbolKind":"property","modules":[{"name":"Factory"}],"externalID":"s:7Factory15SharedContainerP6sharedxvpZ","title":"shared","role":"symbol","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}]},"kind":"symbol","abstract":[{"text":"Defines a single “shared” container for that container type.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/sharedcontainer\/shared"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This container is used by the various @Injected property wrappers to resolve the keyPath to a given Factory. Care should be taken in"},{"type":"text","text":" "},{"type":"text","text":"mixed environments where you’re passing container references AND using the @Injected property wrappers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note this should be defined as a ‘let’ variable, not ‘var’. Using ‘static var’ will cause Swift to issue concurrency warnings in the"},{"type":"text","text":" "},{"type":"text","text":"future whenever the container is accessed."}]}]}],"references":{"doc://Factory/documentation/Factory/SharedContainer/shared":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shared"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/sharedcontainer\/shared","role":"symbol","type":"topic","kind":"symbol","required":true,"title":"shared","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer\/shared","abstract":[{"type":"text","text":"Defines a single “shared” container for that container type."}]},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"title":"SharedContainer","url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}