{"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","interfaceLanguage":"swift"},"sections":[],"metadata":{"title":"ManagedContainer","symbolKind":"protocol","modules":[{"name":"Factory"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ManagedContainer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"externalID":"s:7Factory16ManagedContainerP","role":"symbol","roleHeading":"Protocol"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-65zle","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-78te9","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)"],"title":"Instance Methods"}],"variants":[{"paths":["\/documentation\/factory\/managedcontainer"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"type":"inheritedBy"},{"type":"conformingTypes","title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container"]}],"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"},{"kind":"text","text":" : AnyObject"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"If a container only supports ManagedContainer then the container must be instantiated and passed as an instance. Hereâ€™s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an example of passing such a container to a view model for dependency resolution."}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel {","    let service: MyServiceType","    init(container: Container) {","        service = container.service()","    }","}"]},{"inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","isActive":true,"type":"reference"},{"text":" for more information.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://Factory/documentation/Factory/Container":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Container"}],"kind":"symbol","url":"\/documentation\/factory\/container","title":"Container"},"doc://Factory/documentation/Factory/ManagedContainer/with(_:)":{"title":"with(_:)","type":"topic","abstract":[{"type":"text","text":"Defines a with function to allow container transformation on assignment."}],"url":"\/documentation\/factory\/managedcontainer\/with(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"with","kind":"identifier"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-65zle":{"title":"callAsFunction(key:_:)","type":"topic","abstract":[{"text":"Syntactic sugar allows container to create a properly bound Factory.","type":"text"}],"url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-65zle","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-65zle","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-1ucr5":{"title":"promised(key:)","type":"topic","abstract":[{"text":"Syntactic sugar allows container to create a factory where registration is promised before resolution.","type":"text"}],"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","role":"symbol"},"doc://Factory/documentation/Factory/Resolving":{"type":"topic","title":"Resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolving"}],"url":"\/documentation\/factory\/resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}]},"doc://Factory/documentation/Factory/ManagedContainer/reset(options:)":{"title":"reset(options:)","type":"topic","abstract":[{"type":"text","text":"Defines a thread safe access mechanism to reset the container."}],"url":"\/documentation\/factory\/managedcontainer\/reset(options:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-78te9":{"title":"callAsFunction(key:_:)","type":"topic","abstract":[{"text":"Syntactic sugar allows container to create a properly bound ParameterFactory.","type":"text"}],"url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-78te9","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-78te9","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"kind":"symbol","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","title":"ManagedContainer","role":"symbol","url":"\/documentation\/factory\/managedcontainer"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/ManagedContainer/manager":{"required":true,"title":"manager","type":"topic","abstract":[{"type":"text","text":"Defines the ContainerManager used to manage registrations, resolutions, and scope caching for that container. Encapsulating the code in"},{"type":"text","text":" "},{"text":"this fashion makes creating and using your own custom containers much simpler.","type":"text"}],"url":"\/documentation\/factory\/managedcontainer\/manager","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"manager","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ContainerManagerC","text":"ContainerManager"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager","role":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"title":"SharedContainer","url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/decorator(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"text":"(((","kind":"text"},{"kind":"keyword","text":"Any"},{"text":") -> ())?)","kind":"text"}],"url":"\/documentation\/factory\/managedcontainer\/decorator(_:)","role":"symbol","type":"topic","kind":"symbol","title":"decorator(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","abstract":[{"type":"text","text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container."}]},"doc://Factory/documentation/Factory/Containers":{"role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","title":"Containers","type":"topic","url":"\/documentation\/factory\/containers"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-33ecn":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":") -> "},{"text":"ParameterFactory","preciseIdentifier":"s:7Factory09ParameterA0V","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?>","kind":"text"}],"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-33ecn","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","title":"promised(key:)","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory where registration is promised before resolution."}]}}}