{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifing"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/factorymodifing"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifing"}],"title":"FactoryModifing","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:7Factory0A8ModifingP","modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryModifing"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/P","doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/T"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/registration"]},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/custom(scope:)","doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/reset(_:)"]}],"references":{"doc://Factory/documentation/Factory/FactoryModifing/custom(scope:)":{"role":"symbol","title":"custom(scope:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"custom"},{"kind":"text","text":"("},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Scope","preciseIdentifier":"s:7Factory5ScopeC"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Defines a custom dependency scope for this Factory. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope"},{"type":"text","text":"."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/custom(scope:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/factorymodifing\/custom(scope:)"},"doc://Factory/documentation/Factory/Scope":{"role":"symbol","title":"Scope","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"abstract":[{"type":"text","text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,"},{"type":"text","text":" "},{"type":"text","text":"including "},{"type":"codeVoice","code":"Singleton"},{"type":"text","text":", "},{"type":"codeVoice","code":"Cached"},{"type":"text","text":", "},{"type":"codeVoice","code":"Graph"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Shared"},{"type":"text","text":"."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/factory\/scope"},"doc://Factory/documentation/Factory/FactoryModifing/decorator(_:)":{"role":"symbol","title":"decorator(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decorator"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Adds a factory specific decorator. The decorator will be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"type":"text","text":" be called with the resolved dependency"},{"type":"text","text":" "},{"type":"text","text":"for further examination or manipulation."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/decorator(_:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/factorymodifing\/decorator(_:)"},"doc://Factory/documentation/Factory/FactoryModifing/P":{"role":"symbol","title":"P","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"P"}],"abstract":[{"type":"text","text":"The parameter type of the Factory, if any. Will be "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" on the standard Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/P","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/factory\/factorymodifing\/p"},"doc://Factory/documentation/Factory/Factory":{"role":"symbol","title":"Factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"url":"\/documentation\/factory\/factory"},"doc://Factory/documentation/Factory/FactoryModifing":{"role":"symbol","title":"FactoryModifing","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifing"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifing"}],"url":"\/documentation\/factory\/factorymodifing"},"doc://Factory/documentation/Factory/ParameterFactory":{"role":"symbol","title":"ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/FactoryModifing/reset(_:)":{"role":"symbol","title":"reset(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ContainerManager","preciseIdentifier":"s:7Factory16ContainerManagerC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ResetOptions","preciseIdentifier":"s:7Factory16ContainerManagerC12ResetOptionsO"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Resets the Factory’s behavior to its original state, removing any registrations and clearing any cached items from the specified scope."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/reset(_:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/factorymodifing\/reset(_:)"},"doc://Factory/documentation/Factory/FactoryModifing/T":{"role":"symbol","title":"T","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"T"}],"abstract":[{"type":"text","text":"The return type of the Factory’s dependency."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/T","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/factory\/factorymodifing\/t"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/FactoryModifing/registration":{"role":"symbol","title":"registration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Internal information that desribes this Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing\/registration","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/factory\/factorymodifing\/registration"}}}