{"primaryContentSections":[{"content":[{"text":"Circular Dependency Chain Detection","level":2,"type":"heading","anchor":"Circular-Dependency-Chain-Detection"},{"inlineContent":[{"text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examine the following class definitions."}]},{"syntax":"swift","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"code":"CircularA","type":"codeVoice"},{"text":" is going to result in an infinite loop.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum."}]},{"type":"paragraph","inlineContent":[{"text":"This is a circular dependency chain.","type":"text"}]},{"type":"heading","level":2,"anchor":"Resolution","text":"Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}]},{"type":"codeListing","syntax":null,"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"]},{"inlineContent":[{"type":"text","text":"With the above information in hand we should be able to find the problem and fix it."}],"type":"paragraph"},{"inlineContent":[{"text":"We could fix things by changing CircularC’s injection wrapper to ","type":"text"},{"code":"LazyInjected","type":"codeVoice"},{"type":"text","text":" or, better yet, "},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"But a better solution would probably entail finding and breaking out the functionality that "},{"type":"codeVoice","code":"CircularA"},{"type":"text","text":" and "},{"code":"CircularC","type":"codeVoice"},{"type":"text","text":" are depending upon into a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"third"}]},{"type":"text","text":" object they both could include."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance."}]}],"style":"important","name":"Important"},{"type":"heading","level":2,"text":"Disabling CDC Detection","anchor":"Disabling-CDC-Detection"},{"inlineContent":[{"text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero.","type":"text"}],"type":"paragraph"},{"code":["Container.shared.manager.dependencyChainTestMax = 0"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The default value for ","type":"text"},{"code":"dependencyChainTestMax","type":"codeVoice"},{"type":"text","text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This value can be increased (or decreased) as needed."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/chains"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"metadata":{"modules":[{"name":"Factory"}],"role":"article","roleHeading":"Article","title":"Circular Dependency Chains"},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Chains","interfaceLanguage":"swift"},"sections":[],"abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"],"generated":true}],"references":{"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Previews":{"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","type":"topic","role":"article"},"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","title":"Debugging","url":"\/documentation\/factory\/debugging","type":"topic","role":"article"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","type":"topic","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"kind":"article","url":"\/documentation\/factory\/contexts"},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"url":"\/documentation\/factory\/testing","kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article"}}}