{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Examples","level":2,"type":"heading","text":"Examples"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ New static Service Locator","    let newSchool = Container.newSchool()","    ","    \/\/ New shared Service Locator","    let service = Container.shared.constructedService()","    ","    \/\/ Constructor initialized from container","    let service2: MyServiceType","    ","    \/\/ Lazy initialized from passed container","    private let container: Container","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6A: MyServiceType = container.sharedService()","    private lazy var service6B: MyServiceType = container.sharedService()","    ","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","    ","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","    ","    \/\/ Constructor","    init(container: Container) {","        \/\/ construct from container","        service2 = container.service()","        ","        \/\/ save container reference for lazy resolution","        self.container = container","    }","","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Resolutions","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"seeAlsoSections":[{"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"generated":true}],"references":{"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Registrations":{"role":"article","title":"Sample Registrations","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","kind":"article","type":"topic","url":"\/documentation\/factory\/registrations"}}}