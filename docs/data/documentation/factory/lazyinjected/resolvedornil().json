{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper instance if it hasn’t already been resolved."}]},{"type":"codeListing","syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/lazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"title":"resolvedOrNil()","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:7Factory12LazyInjectedV13resolvedOrNilxSgyF","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/LazyInjected"]]},"references":{"doc://Factory/documentation/Factory/LazyInjected":{"role":"symbol","title":"LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"url":"\/documentation\/factory\/lazyinjected"},"doc://Factory/documentation/Factory/LazyInjected/resolvedOrNil()":{"role":"symbol","title":"resolvedOrNil()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","kind":"symbol","type":"topic","url":"\/documentation\/factory\/lazyinjected\/resolvedornil()"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}