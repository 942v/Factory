{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dependency injection exists to manage and decouple dependencies among objects; making the code more modular, maintainable, and testable. It says so right on the label."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As you’ve already seen, the main mechanism provided by Factory to accomplish this is registration. Going into the dependency system and registering a new type, typically a mock or stub or spy, in order for that type to be injected into the code under test."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.accountLoading.register { MockNoAccounts() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But Factory has other enhancements designed to make unit testing and user interface testing simpler and easier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some, like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},{"type":"text","text":" you may have already seen and used. Others, like pushing\/popping container state, resetting, and so on, are discussed below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before we look at them, it’s important to first understand Xcode’s test process and environment, and consider what that means when writing your own unit tests using Factory."}]},{"anchor":"The-Unit-Test-Environment","level":2,"type":"heading","text":"The Unit Test Environment"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you run a unit test, Xcode is launching and running your app in order to provide a relevant context for your test code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that application main ran, that the application delegate’s "},{"type":"codeVoice","code":"didFinishLaunchingWithOptions"},{"type":"text","text":" function ran, and all the code needed to get to your first screen ran. When your app reaches a state where RunLoop.main starts idling and waiting for user input, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"then"}]},{"type":"text","text":" XCTest will start constructing test classes and running test cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of which means that a LOT of code has already run before your first test has even fired."}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Including dependency injection code."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So when writing unit tests we need to keep in mind what our initial runtime application environment looks like, what Factory registrations may have already have occurred, and in particular, if any of those registrations were scoped and cached."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is specially true when dealing with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"singletons"}]},{"type":"text","text":". But again, let’s save that topic for a bit later."}]},{"anchor":"Changing-Not-Rebuilding","level":2,"type":"heading","text":"Changing, Not Rebuilding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So our environment exists, running and awaiting our first test. All of our original runtime dependency injection extensions and registrations are also out there, ready to be resolved and injected when needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that’s great. A cryptographic hashing dependency can be used in production and in test with no repercussions. We don’t need to change a thing. And in fact, the more working code we can test in its shipping state, the better."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, other services like analytics might want to be swapped out during testing. Don’t want to fed the system all of your dummy test data. Again, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},{"type":"text","text":" can help with that."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But we’re here to test, and one thing we probably "},{"type":"emphasis","inlineContent":[{"type":"text","text":"do"}]},{"type":"text","text":" care about is the code is talks to our APIs and other services. Those are the classes and services that we’re probably going to want to mock and reregister so we can test our view models and business logic against stable test data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Again, Factory makes that easy."}]},{"type":"codeListing","syntax":"swift","code":["func testNoAccounts() async {","    \/\/ register a mock","    Container.shared.accountLoading.register { MockNoAccounts() }","    \/\/ instantiate the model that uses the mock","    let model = Container.shared.accountsViewModel()","    \/\/ and test...","    await model.load()","    XCTAssertTrue(model.isLoaded)","    XCTAssertTrue(model.isEmpty)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or we can write a test against unstable test data…"}]},{"type":"codeListing","syntax":"swift","code":["func testNoAccounts() async {","    \/\/ register a mock","    Container.shared.accountLoading.register { MockAccountError(404) }","    \/\/ instantiate the model that uses the mock","    let model = Container.shared.accountsViewModel()","    \/\/ and test...","    await model.load()","    XCTAssertFalse(model.isLoaded)","    XCTAssertTrue(model.isError)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Only if we’re running a lot of tests like this then we’re going to making a lot of changes to the dependency injection environment. And that’s problematic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to make sure that a change made in one test doesn’t affect a later test that relied on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"original"}]},{"type":"text","text":" object that demonstrated a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"different"}]},{"type":"text","text":" behavior. Or setting up circumstances where randomizing tests can cause the same thing to occur."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sound confusing? It is. Try tracking it down in actual code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How to solve it? Well, the best solution to that sort of problem is to avoid it in the first place."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, Factory can help with that."}]},{"anchor":"Pushing-and-Popping-State","level":2,"type":"heading","text":"Pushing and Popping State"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your unit test setUp function you can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"push"}]},{"type":"text","text":" the current state of the registration system and then register and test anything you want."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in teardown you can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pop"}]},{"type":"text","text":" the stack, eliminating all of your changes and restoring the container to its original state before the push."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This lets each set of tests start from the same initial state, irregardless of what any prior test had changed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example assumes we’re using the shared container."}]},{"type":"codeListing","syntax":"swift","code":["final class FactoryCoreTests: XCTestCase {","","    override func setUp() {","        Container.shared.manager.push()","        Container.shared.setupMocks()","    }","    ","    override func tearDown() {","        Container.shared.manager.pop()","    }","    ","    func testNoAccounts() async {","        Container.shared.accountLoading.register { MockNoAccounts() }","        let model = Container.shared.accountsViewModel()","        await model.load()","        XCTAssertTrue(model.isLoaded)","        XCTAssertTrue(model.isEmpty)","    }","","    func testError() async {","        Container.shared.accountLoading.register { MockAccountError(404) }","        let model = Container.shared.accountsViewModel()","        await model.load()","        XCTAssertTrue(model.isError)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s pretty much it. Our "},{"type":"codeVoice","code":"AccountsViewModel"},{"type":"text","text":" depended on an "},{"type":"codeVoice","code":"AccountsLoading"},{"type":"text","text":" service."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Change the service provided and we change the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":" provided. Change the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"data"}]},{"type":"text","text":" provided and we change our view model’s behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we test the results to see if everything matches up with our expectations."}]},{"anchor":"Diving-Deeper","level":2,"type":"heading","text":"Diving Deeper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the above is just one way of doing things. If, for example, our "},{"type":"codeVoice","code":"AccountLoader"},{"type":"text","text":" service depended on a custom network layer, we could reach further down the stack."}]},{"type":"codeListing","syntax":"swift","code":["func testNoAccounts() async throws {","    let json = #\"{ \"accounts\": [] }\"#","    Container.shared.networking.register { MockJSON(json) }","    let model = Container.shared.accountsViewModel()","    \/\/ as before","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We create the "},{"type":"codeVoice","code":"AccountsViewModel"},{"type":"text","text":", the view model injects the "},{"type":"codeVoice","code":"AccountLoading"},{"type":"text","text":" service, and that service injects our mock network service."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Same for our error code."}]},{"type":"codeListing","syntax":"swift","code":["func testNoAccounts() async throws {","    Container.shared.networking.register { MockError(404) }","    let model = Container.shared.accountsViewModel()","    \/\/ as before","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Layering your code in such a fashion can dramatically reduce the number of mocks and other objects you need to create and mange. You don’t just change the view model’s dependencies. You change the dependencies the dependencies depend on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory makes reaching deep into a dependency tree and adjusting behavior simple and easy."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can even help you see what’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" that dependency tree. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging"},{"type":"text","text":" for more information."}]},{"anchor":"Rebuilding-The-Container","level":2,"type":"heading","text":"Rebuilding The Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your unit test setUp function you can also just create a new container and start over from scratch. No teardown needed."}]},{"type":"codeListing","syntax":"swift","code":["final class FactoryCoreTests: XCTestCase {","","    override func setUp() {","        Container.shared = Container()","        Container.shared.setupMocks()","    }","    ","    func testNoAccounts() throws {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this is pretty safe to do in the majority of cases. Your application has already launched, obtained what it needed, and is now idling."}]},{"anchor":"Passed-Containers","level":2,"type":"heading","text":"Passed Containers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also pass the container into the view model itself."}]},{"type":"codeListing","syntax":"swift","code":["final class FactoryCoreTests: XCTestCase {","","    var container: Container!","","    override func setUp() {","        container = Container()","        container.setupMocks()","    }","    ","    func testSomething() throws {","        container.myServiceType.register(factory: { MockService() })","        let model = MyViewModel(container: container)","        model.load()","        XCTAssertTrue(model.isLoaded)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This does, of course, assume that you structured your app appropriately."}]},{"anchor":"Common-Setup","level":2,"type":"heading","text":"Common Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown in the earlier examples, if we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}"]},{"anchor":"Testing-Singletons","level":2,"type":"heading","text":"Testing Singletons"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s talk singletons. The singleton scope cache is global, meaning that it’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" managed by any specific container."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That being the case, neither the push\/pull mechanism or the container rebuilding mechanisms described above will clear any cached singleton instances."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Singletons are, after all, expected to be singletons."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So what to do about it? Well, if needed we can reset "},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" cached singleton with just a single method call. Just call reset on that particular scope."}]},{"type":"codeListing","syntax":"swift","code":["Scope.singleton.reset()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can reset a specific singleton by reaching out to its factory."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ reset everything for that factory","Container.shared.someSingletonFactory.reset()","\/\/ reset just the scope cache","Container.shared.someSingletonFactory.reset(options: .scope)","\/\/ or simply register a new instance","Container.shared.someSingletonFactory.register { MyNewMock() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On that last point. Doing a registration change on a factory usually clears it’s associated scope automatically. The assumption, of course, being that if you register something you expect it to be used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also applies to singletons "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unless you’re inside of a autoRegister block."}]},{"type":"text","text":" AutoRegistration can happen on every container creation, and automatically clearing a registered singleton each and every time that occurs kind of defeats the idea of multiple containers on one hand and singletons on the other."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"So all that said, we can deal with them. But as a general rule, singletons can complicate your life, your code, and your tests, and as such they should be avoided and only be used when there’s an overriding need for there to be one and only one instance of an object."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Got that, Highlander?"}]},{"anchor":"Xcode-UITesting","level":2,"type":"heading","text":"Xcode UITesting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UITesting can be more challenging, in that we’re now to dealing with an active, running application. We have our existing tools, of course, but the issue is often complicated by the fact that we may want to change the application’s behavior "},{"type":"emphasis","inlineContent":[{"type":"text","text":"before"}]},{"type":"text","text":" it gets to RunLoop.main and starts idling."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One solution is passed parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The test case is fairly straightforward."}]},{"type":"codeListing","syntax":"swift","code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\") \/\/ passed parameter","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in our application we use Factory’s auto registration feature to check the launch arguments to see what registrations we might want to change."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        if ProcessInfo().arguments.contains(\"mock1\") {","            myServiceType.register { MockServiceN(1) }","        }","        #endif","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or you can simplify things with an "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" context that accomplishes the same thing."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType.onArg(\"mock1\") { MockServiceN(1) }","        #endif","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many contexts for testing, previews, and even UITesting. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},{"type":"text","text":" for more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Obviously, one can add as many different test cases and registrations as needed."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/testing"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Testing","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Testing","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"references":{"doc://Factory/documentation/Factory/Contexts":{"role":"article","title":"Contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","kind":"article","type":"topic","url":"\/documentation\/factory\/contexts"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","type":"topic","url":"\/documentation\/factory\/debugging"},"doc://Factory/documentation/Factory/Previews":{"role":"article","title":"SwiftUI Previews","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","type":"topic","url":"\/documentation\/factory\/previews"},"doc://Factory/documentation/Factory/Chains":{"role":"article","title":"Circular Dependency Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","type":"topic","url":"\/documentation\/factory\/chains"}}}