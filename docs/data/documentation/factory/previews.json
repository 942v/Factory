{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}]},{"anchor":"SwiftUI-Integrations","level":2,"type":"heading","text":"SwiftUI Integrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["class ContentView: ObservableObject {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes above)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike Resolver, Factory doesn’t have an @InjectedObject property wrapper. There are "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/hmlongco\/Factory\/issues\/15"},{"type":"text","text":", but for now doing your own assignment to "},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" is the preferred approach."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, at this point in time I feel that we should probably avoid using Factory to create the view model in the first place.  It’s usually unnecessary, "},{"type":"reference","isActive":true,"identifier":"https:\/\/betterprogramming.pub\/swiftui-view-models-are-not-protocols-8c415c0325b1"},{"type":"text","text":", and for the most part Factory’s really designed to provide the VM and other services with the dependencies that "},{"type":"emphasis","inlineContent":[{"type":"text","text":"they"}]},{"type":"text","text":" need."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Especially since those services have no access to the environment."}]},{"anchor":"SwiftUI-Previews","level":2,"type":"heading","text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With that in mind, here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview."}]},{"type":"codeListing","syntax":"swift","code":["class ContentView: ObservableObject {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"anchor":"Multiple-Previews","level":2,"type":"heading","text":"Multiple Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"]},{"anchor":"Common-Setup","level":2,"type":"heading","text":"Common Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/previews"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Previews","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","metadata":{"roleHeading":"Article","title":"SwiftUI Previews","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"references":{"https://github.com/hmlongco/Factory/issues/15":{"title":"a few reasons for this","titleInlineContent":[{"type":"text","text":"a few reasons for this"}],"type":"link","identifier":"https:\/\/github.com\/hmlongco\/Factory\/issues\/15","url":"https:\/\/github.com\/hmlongco\/Factory\/issues\/15"},"doc://Factory/documentation/Factory/Optionals":{"role":"article","title":"Optionals and Dynamic Registration","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","kind":"article","type":"topic","url":"\/documentation\/factory\/optionals"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Cycle":{"role":"article","title":"Resolution Cycles","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","type":"topic","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Chains":{"role":"article","title":"Circular Dependency Chains","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","type":"topic","url":"\/documentation\/factory\/chains"},"doc://Factory/documentation/Factory/Testing":{"role":"article","title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","type":"topic","url":"\/documentation\/factory\/testing"},"doc://Factory/documentation/Factory/Functional":{"role":"article","title":"Functional Injection","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","kind":"article","type":"topic","url":"\/documentation\/factory\/functional"},"https://betterprogramming.pub/swiftui-view-models-are-not-protocols-8c415c0325b1":{"title":"you really can’t use protocols with view models anyway","titleInlineContent":[{"type":"text","text":"you really can’t use protocols with view models anyway"}],"type":"link","identifier":"https:\/\/betterprogramming.pub\/swiftui-view-models-are-not-protocols-8c415c0325b1","url":"https:\/\/betterprogramming.pub\/swiftui-view-models-are-not-protocols-8c415c0325b1"}}}