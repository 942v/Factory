{"seeAlsoSections":[{"generated":true,"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolutions"]}],"kind":"article","metadata":{"role":"article","title":"Sample Registrations","modules":[{"name":"Factory"}],"roleHeading":"Article"},"abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Registrations"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/registrations"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Basic","text":"Basic","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"]},{"inlineContent":[{"text":"This registered dependency returns a new, unique version of ","type":"text"},{"code":"MyServiceType","type":"codeVoice"},{"text":" whenever it’s asked to do so.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container.","type":"text"}]},{"type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"We prefer the more concise version, and that’s what we’ll use going forward.","type":"text"}]},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The container helper functions are ","type":"text"},{"type":"codeVoice","code":"@inlinable"},{"type":"text","text":" and as such there’s no performance penalty incurred when calling them."}],"type":"paragraph"}],"style":"note"},{"level":3,"type":"heading","text":"Scopes","anchor":"Scopes"},{"inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}],"type":"paragraph"},{"code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Constructor Injection","anchor":"Constructor-Injection","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}]},{"code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Parameters","text":"Parameters","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true},{"text":".","type":"text"}]},{"syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that we also needed to specify the type of our parameter."}],"type":"paragraph"},{"anchor":"Same-Types","level":3,"text":"Same Types","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Example of correctly handling multiple instances of the same type.","type":"text"}]},{"code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Inside-Custom-Containers","text":"Inside Custom Containers","type":"heading","level":3},{"inlineContent":[{"text":"You’ve seen factory registrations done within container ","type":"text"},{"inlineContent":[{"type":"text","text":"extensions"}],"type":"emphasis"},{"type":"text","text":", but it should also be noted that we can also create them within our own custom containers."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"]},{"inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"code":"service2","type":"codeVoice"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle.","type":"text"}]}],"style":"warning","type":"aside","name":"Warning"},{"inlineContent":[{"text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands.","type":"text"}],"type":"paragraph"},{"text":"Static Factory’s","type":"heading","anchor":"Static-Factorys","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a static Factory 2.0 registration container."}]},{"code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"While you ","type":"text"},{"inlineContent":[{"type":"text","text":"can"}],"type":"emphasis"},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","type":"reference"},{"type":"text","text":" property wrappers due to the lack of keyPaths."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"]}]}],"references":{"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Injected","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","type":"topic"},"doc://Factory/documentation/Factory/GettingStarted":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory/Resolutions":{"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"title":"Sample Resolutions","type":"topic","url":"\/documentation\/factory\/resolutions","kind":"article","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","url":"\/documentation\/factory\/parameterfactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","role":"symbol","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]}}}