{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An object or service of the desired type.","type":"text"}]}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the "},{"type":"codeVoice","code":"shared"},{"text":" container that’s provided for each","type":"text"},{"text":" ","type":"text"},{"text":"and every container type.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let service = Container.shared.service()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resolved instance may be brand new or Factory may return a cached value from the specified "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re passing an instance of a container around to your views or view models, just call it directly."}]},{"code":["let service = container.service()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Injected(\\.service) var service: ServiceType"],"syntax":"swift"},{"inlineContent":[{"text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,","type":"text"},{"type":"text","text":" "},{"text":"so the above example is functionally identical to the ","type":"text"},{"type":"codeVoice","code":"Container.shared.service()"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"text":" ","type":"text"},{"text":"your own container.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"syntax":"swift"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()"},"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"metadata":{"modules":[{"name":"Factory"}],"role":"symbol","roleHeading":"Instance Method","title":"callAsFunction()","externalID":"s:7FactoryAAV14callAsFunctionxyF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"references":{"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"return a cached value from the specified scope."}],"kind":"symbol","role":"symbol","title":"callAsFunction()"},"doc://Factory/documentation/Factory/Scope":{"navigatorTitle":[{"kind":"identifier","text":"Scope"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factory\/scope","abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"text":" ","type":"text"},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Singleton"},{"type":"text","text":", "},{"type":"codeVoice","code":"Cached"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Graph"},{"type":"text","text":", and "},{"code":"Shared","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","type":"topic","title":"Scope"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","type":"topic","url":"\/documentation\/factory\/factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"role":"symbol"}}}