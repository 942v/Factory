{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory"},"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Adaptable","type":"text"}]},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performant"}]},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Concise","type":"text"}],"type":"strong"},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Documented","type":"text"}]},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Lightweight"}],"type":"strong"},{"type":"text","text":": With all of that Factory is slim and trim, under 800 lines of executable code."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Tested"}],"type":"strong"},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Free"}],"type":"strong"},{"type":"text","text":": Factory is free and open source under the MIT License."}]}]}]},{"inlineContent":[{"text":"Ready to get started?","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory"]}],"metadata":{"symbolKind":"module","modules":[{"name":"Factory"}],"title":"Factory","externalID":"Factory","role":"collection","roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"title":"The Basics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"title":"Development and Testing"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics"},{"title":"Additional Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"title":"Classes"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"title":"Protocols"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryKey","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"title":"Structures"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"title":"Functions"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"],"title":"Enumerations"}],"references":{"doc://Factory/documentation/Factory/Resolving":{"type":"topic","title":"Resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Resolving"}],"url":"\/documentation\/factory\/resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}]},"doc://Factory/documentation/Factory/FactoryModifying":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryModifying"}],"url":"\/documentation\/factory\/factorymodifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","title":"FactoryModifying","role":"symbol","type":"topic","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Tags":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","title":"Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"},"doc://Factory/documentation/Factory/GettingStarted":{"url":"\/documentation\/factory\/gettingstarted","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started","role":"collectionGroup"},"doc://Factory/documentation/Factory/Migration":{"abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","title":"Migration","url":"\/documentation\/factory\/migration","type":"topic","role":"article"},"doc://Factory/documentation/Factory/FactoryContext":{"role":"symbol","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"abstract":[],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","kind":"symbol","title":"FactoryContext","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryContext"}],"url":"\/documentation\/factory\/factorycontext"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResetOptions"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","url":"\/documentation\/factory\/factoryresetoptions","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"title":"FactoryResetOptions"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"url":"\/documentation\/factory\/testing","kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","title":"Factory Modifiers","url":"\/documentation\/factory\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"role":"article"},"doc://Factory/documentation/Factory/FactoryKey":{"title":"FactoryKey","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryKey","url":"\/documentation\/factory\/factorykey","type":"topic","role":"symbol","navigatorTitle":[{"text":"FactoryKey","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryKey"}],"kind":"symbol","abstract":[]},"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","title":"Debugging","url":"\/documentation\/factory\/debugging","type":"topic","role":"article"},"doc://Factory/documentation/Factory/ContainerManager":{"navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"role":"symbol","url":"\/documentation\/factory\/containermanager","title":"ContainerManager","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}]},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","type":"topic","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","kind":"symbol","title":"Factory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"title":"resolve(_:)","type":"topic","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"url":"\/documentation\/factory\/resolve(_:)-52olu","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Factory9ContainerC","kind":"typeIdentifier","text":"Container"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","role":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","type":"topic","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"kind":"article","url":"\/documentation\/factory\/contexts"},"doc://Factory/documentation/Factory/ParameterFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","url":"\/documentation\/factory\/parameterfactory","title":"ParameterFactory","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"kind":"symbol","type":"topic","title":"WeakLazyInjected","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","role":"symbol","url":"\/documentation\/factory\/weaklazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}]},"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","url":"\/documentation\/factory\/scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","kind":"article","title":"Scopes"},"doc://Factory/documentation/Factory/FactoryRegistration":{"title":"FactoryRegistration","type":"topic","url":"\/documentation\/factory\/factoryregistration","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","role":"symbol","navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryRegistration","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}]},"doc://Factory/documentation/Factory/Functional":{"title":"Functional Injection","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","url":"\/documentation\/factory\/functional","type":"topic","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article"},"doc://Factory/documentation/Factory/FactoryContextType":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"title":"FactoryContextType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"role":"symbol","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","url":"\/documentation\/factory\/factorycontexttype"},"doc://Factory/documentation/Factory/LazyInjected":{"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}],"title":"LazyInjected","url":"\/documentation\/factory\/lazyinjected","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Injected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factory\/injected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}]},"doc://Factory/documentation/Factory/InjectedType":{"title":"InjectedType","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedType"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","url":"\/documentation\/factory\/injectedtype","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}]},"doc://Factory/documentation/Factory/Containers":{"role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","title":"Containers","type":"topic","url":"\/documentation\/factory\/containers"},"doc://Factory/documentation/Factory/Modules":{"type":"topic","url":"\/documentation\/factory\/modules","role":"article","kind":"article","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://Factory/documentation/Factory/Previews":{"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","type":"topic","role":"article"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/factory\/resolve(_:)-632zk","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","title":"resolve(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Optionals":{"type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","url":"\/documentation\/factory\/optionals","role":"article"},"doc://Factory/documentation/Factory/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","type":"topic","role":"article"},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"kind":"symbol","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","title":"ManagedContainer","role":"symbol","url":"\/documentation\/factory\/managedcontainer"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design"},"doc://Factory/documentation/Factory/InjectedObject":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobject","role":"symbol","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"title":"InjectedObject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"title":"SharedContainer","url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/Container":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","type":"topic","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Container"}],"kind":"symbol","url":"\/documentation\/factory\/container","title":"Container"},"doc://Factory/documentation/Factory/AutoRegistering":{"url":"\/documentation\/factory\/autoregistering","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"title":"AutoRegistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"role":"symbol","kind":"symbol"}}}