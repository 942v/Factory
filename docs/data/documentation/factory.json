{"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"]},{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]},{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"]},{"title":"Additional Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"]},{"title":"Classes","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"]},{"title":"Protocols","identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryKey","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"title":"Structures"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"title":"Functions"},{"title":"Type Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"]},{"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"sections":[],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Adaptable","type":"text"}],"type":"strong"},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Performant"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Safe","type":"text"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible"}]},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Free","type":"text"}]},{"text":": Factory is free and open source under the MIT License.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Ready to get started?"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"Factory","symbolKind":"module","role":"collection","modules":[{"name":"Factory"}],"roleHeading":"Framework","externalID":"Factory"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory"},"hierarchy":{"paths":[[]]},"references":{"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","kind":"article","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"title":"Scopes","url":"\/documentation\/factory\/scopes","type":"topic"},"doc://Factory/documentation/Factory/Tags":{"type":"topic","title":"Tags","kind":"article","role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"url":"\/documentation\/factory\/tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"type":"topic","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Container","preciseIdentifier":"s:7Factory9ContainerC"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>) -> "},{"text":"T","kind":"typeIdentifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","title":"resolve(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-52olu"},"doc://Factory/documentation/Factory/Factory":{"url":"\/documentation\/factory\/factory","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"type":"topic","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/GettingStarted":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WeakLazyInjected"}],"type":"topic","title":"WeakLazyInjected","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factory\/weaklazyinjected"},"doc://Factory/documentation/Factory/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"type":"topic","role":"article","url":"\/documentation\/factory\/chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","title":"Circular Dependency Chains"},"doc://Factory/documentation/Factory/Previews":{"role":"article","title":"SwiftUI Previews","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"url":"\/documentation\/factory\/previews","type":"topic"},"doc://Factory/documentation/Factory/FactoryKey":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryKey","kind":"symbol","title":"FactoryKey","type":"topic","url":"\/documentation\/factory\/factorykey","abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryKey","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryKey","kind":"identifier"}]},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Injected","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","type":"topic"},"doc://Factory/documentation/Factory/Design":{"type":"topic","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","kind":"article","url":"\/documentation\/factory\/design","role":"article","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}]},"doc://Factory/documentation/Factory/InjectedType":{"abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"InjectedType","kind":"identifier"}],"url":"\/documentation\/factory\/injectedtype","kind":"symbol","title":"InjectedType","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"role":"symbol","navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"title":"FactorySharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactorySharedContainer"}],"kind":"symbol","abstract":[],"url":"\/documentation\/factory\/factorysharedcontainer","type":"topic"},"doc://Factory/documentation/Factory/Resolving":{"type":"topic","abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}],"navigatorTitle":[{"text":"Resolving","kind":"identifier"}],"url":"\/documentation\/factory\/resolving","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}],"role":"symbol","title":"Resolving"},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"abstract":[],"kind":"symbol","type":"topic","title":"FactoryManagedContainer","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryManagedContainer","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","navigatorTitle":[{"kind":"identifier","text":"FactoryManagedContainer"}],"url":"\/documentation\/factory\/factorymanagedcontainer"},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","title":"Container","kind":"symbol","type":"topic","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"url":"\/documentation\/factory\/container","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}]},"doc://Factory/documentation/Factory/AutoRegistering":{"url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","kind":"symbol","abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}],"title":"AutoRegistering","role":"symbol","type":"topic","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AutoRegistering"}]},"doc://Factory/documentation/Factory/Contexts":{"kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"title":"Contexts","url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory/FactoryScope":{"abstract":[],"title":"FactoryScope","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FactoryScope","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"url":"\/documentation\/factory\/factoryscope"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"kind":"symbol","type":"topic","title":"resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","url":"\/documentation\/factory\/resolve(_:)-632zk"},"doc://Factory/documentation/Factory/SharedContainer":{"abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/sharedcontainer","kind":"symbol","title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"abstract":[],"title":"FactoryAutoRegistering","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryAutoRegistering"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","navigatorTitle":[{"text":"FactoryAutoRegistering","kind":"identifier"}],"url":"\/documentation\/factory\/factoryautoregistering"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","url":"\/documentation\/factory\/parameterfactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","role":"symbol","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryRegistration":{"abstract":[{"text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","url":"\/documentation\/factory\/factoryregistration","title":"FactoryRegistration"},"doc://Factory/documentation/Factory/ContainerManager":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"title":"ContainerManager","url":"\/documentation\/factory\/containermanager","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","role":"symbol","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"kind":"symbol","type":"topic"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","kind":"symbol","url":"\/documentation\/factory\/lazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","role":"symbol"},"doc://Factory/documentation/Factory/FactoryResolving":{"type":"topic","abstract":[],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresolving","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryResolving","kind":"identifier"}],"role":"symbol","title":"FactoryResolving"},"doc://Factory/documentation/Factory/Functional":{"type":"topic","title":"Functional Injection","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","kind":"article","url":"\/documentation\/factory\/functional","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}]},"doc://Factory/documentation/Factory/Containers":{"url":"\/documentation\/factory\/containers","type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","kind":"article","title":"Containers","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}]},"doc://Factory/documentation/Factory/Modifiers":{"type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","title":"Factory Modifiers"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","type":"topic"},"doc://Factory/documentation/Factory/ManagedContainer":{"navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","title":"ManagedContainer","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"}],"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"type":"topic","title":"FactoryContainerManager","navigatorTitle":[{"kind":"identifier","text":"FactoryContainerManager"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContainerManager"}],"abstract":[],"url":"\/documentation\/factory\/factorycontainermanager","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","type":"topic"},"doc://Factory/documentation/Factory/FactoryContainer":{"abstract":[],"kind":"symbol","type":"topic","title":"FactoryContainer","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryContainer","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","navigatorTitle":[{"kind":"identifier","text":"FactoryContainer"}],"url":"\/documentation\/factory\/factorycontainer"},"doc://Factory/documentation/Factory/FactoryContextType":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"type":"topic","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"title":"FactoryContextType","url":"\/documentation\/factory\/factorycontexttype","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResetOptions"}],"title":"FactoryResetOptions","type":"topic","abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/factoryresetoptions"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Migration":{"abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}],"title":"Migration","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","url":"\/documentation\/factory\/migration"},"doc://Factory/documentation/Factory/InjectedObject":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectedObject","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"title":"InjectedObject","role":"symbol","url":"\/documentation\/factory\/injectedobject"},"doc://Factory/documentation/Factory/FactoryContext":{"type":"topic","abstract":[],"title":"FactoryContext","kind":"symbol","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontext","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FactoryContext","kind":"identifier"}],"role":"symbol"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"title":"Testing","role":"article","type":"topic"},"doc://Factory/documentation/Factory/Modules":{"type":"topic","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","kind":"article","url":"\/documentation\/factory\/modules","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}]},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","title":"Resolution Cycles","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","url":"\/documentation\/factory\/cycle","role":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}]},"doc://Factory/documentation/Factory/Optionals":{"type":"topic","title":"Optionals and Dynamic Registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","kind":"article","url":"\/documentation\/factory\/optionals","role":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}]}}}