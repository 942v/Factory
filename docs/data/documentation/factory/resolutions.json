{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","\/\/ New factory static service Locator","let newSchool = Container.newSchool()","","\/\/ New shared service Locator","let service = Container.shared.constructedService()","","\/\/ Constructor initialized from container","let service2: MyServiceType","","\/\/ Lazy initialized from passed container","private let container: Container","private lazy var service3: MyConstructedService = container.constructedService()","private lazy var service4: MyServiceType = container.cachedService()","private lazy var service5: SimpleService = container.singletonService()","private lazy var service6A: MyServiceType = container.sharedService()","private lazy var service6B: MyServiceType = container.sharedService()","","\/\/ Injected property from default shared container","@Injected(\\.constructedService) var constructed","","\/\/ Injected property from shared custom container","@Injected(\\MyContainer.anotherService) var anotherService","","\/\/ Injected property from shared custom container","@Injected(\\.graphBase) var graphBase","","\/\/ Constructor","init(container: Container) {","\/\/ construct from container","service2 = container.service()","","\/\/ save container reference for lazy resolution","self.container = container","","print(constructed.text())","print(service.text())","print(service2.text())","print(service3.text())","print(service4.text())","print(service5.text())","}","","func test() {","print(container.manager.registrations)","print(container.manager.cache)","","print(Scope.cached.scopeID)","container.manager.reset(scope: .cached)","print(container.manager.registrations)","print(container.manager.cache)","","container.manager.reset()","print(container.manager.registrations)","print(container.manager.cache)","","print(\"SHARED = \\(service6A.id == service6B.id)\")","print(\"GRAPH = \\(graphBase.dependency1.id == graphBase.dependency2.id)\")","","print(container.manager.registrations)","print(container.manager.cache)","","print(container.string1())","print(container.string2())","container.string1.register { \"New String 1\" }","print(container.string1())","print(container.string2())","","let _ = MyContainer.staticTest()","","\/\/ container.testCircularDependencies()","}","","let ditest = DITest()","","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Resolutions","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}