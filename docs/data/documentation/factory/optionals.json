{"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"anchor":"Dynamic-Registration","type":"heading","level":2,"text":"Dynamic Registration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?"}]},{"inlineContent":[{"text":"Now let’s take a look at a dynamic registration in action.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"text":"Explicitly Unwrapped Optionals","level":2,"type":"heading","anchor":"Explicitly-Unwrapped-Optionals"},{"inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"type":"text","text":"could"}],"type":"emphasis"},{"type":"text","text":" explicitly unwrap the optional…"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’d advise against it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"code":"@Injected","type":"codeVoice"},{"text":" to supply an optional type. We don’t need a ","type":"text"},{"code":"@OptionalInjected","type":"codeVoice"},{"type":"text","text":" property wrapper to do this as we did in Resolver. Same for "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},{"type":"text","text":" for more."}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true}],"variants":[{"paths":["\/documentation\/factory\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Optionals"},"metadata":{"modules":[{"name":"Factory"}],"roleHeading":"Article","role":"article","title":"Optionals and Dynamic Registration"},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"sections":[],"kind":"article","hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic","title":"Modular Development"},"doc://Factory/documentation/Factory/Cycle":{"url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","role":"article","kind":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","title":"Resolution Cycles"},"doc://Factory/documentation/Factory/Tags":{"url":"\/documentation\/factory\/tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","role":"article","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","title":"Tags"},"doc://Factory/documentation/Factory/Functional":{"url":"\/documentation\/factory\/functional","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","role":"article","kind":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"type":"topic","title":"Functional Injection"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","title":"Designing Factory"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","role":"article","type":"topic","url":"\/documentation\/factory\/modifiers"}}}