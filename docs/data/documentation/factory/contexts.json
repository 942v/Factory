{"abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"metadata":{"role":"article","title":"Contexts","modules":[{"name":"Factory"}],"roleHeading":"Article"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Developers often use Factory to mock data for previews and unit tests. Now Factory 2.1 extends these capabilities by allowing them to specify dependencies based on the application’s current ","type":"text"},{"inlineContent":[{"type":"text","text":"context"}],"type":"emphasis"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"What if, for example, you ","type":"text"},{"inlineContent":[{"type":"text","text":"never"}],"type":"strong"},{"text":" want your application’s analytics library to be called when running unit tests?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Piece of cake. Just register a new override for that particular context.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        container.analytics","            .context(.test) { MockAnalyticsEngine() }","        #endif","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Factory makes it easy.","type":"text"}]},{"type":"heading","text":"Contexts","anchor":"Contexts","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory 2.1 provides quite a few predefined contexts for your use. They are:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"arg(String)"}]},{"text":" - application is launched with a particular argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"args([String])"}]},{"text":" - application is launched with one of several arguments.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"preview"}],"type":"strong"},{"type":"text","text":" - application is running in Xcode Preview mode"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"type":"text","text":" - application is running in Xcode Unit Test mode"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"debug","type":"text"}],"type":"strong"},{"type":"text","text":" - application is running in Xcode DEBUG mode"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"simulator","type":"text"}]},{"type":"text","text":" - application is running within an Xcode simulator"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"device","type":"text"}],"type":"strong"},{"type":"text","text":" - application is running on an actual device"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s dive in."}]},{"anchor":"Some-Examples","text":"Some Examples","level":2,"type":"heading"},{"level":3,"type":"heading","text":"• onTest","anchor":"-onTest"},{"inlineContent":[{"text":"As mentioned, the Factory closure associated with this context is used whenever your application or library is running unit tests using XCTest.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["container.analytics","    .context(.test) { MockAnalyticsEngine() }"]},{"inlineContent":[{"type":"text","text":"There’s also a shortcut version:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["container.analytics","    .onTest { MockAnalyticsEngine() }"]},{"inlineContent":[{"type":"text","text":"Having contexts built into Factory saves you from having to go to StackOverflow in an attempt to figure out how to do the same thing for yourself."}],"type":"paragraph"},{"syntax":"swift","code":["if ProcessInfo.processInfo.environment[\"XCTestConfigurationFilePath\"] != nil {","    container.analytics.register { MockAnalyticsEngine() }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Using onTest is much easier."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"By the way, checking the environment for XCTestConfigurationFilePath doesn’t work if your tests are launched from the command line using swift test. So much for StackOverflow."}]}]},{"level":3,"type":"heading","anchor":"-onPreview","text":"• onPreview"},{"inlineContent":[{"text":"This specifies a dependency that will be used whenever your app or module is running SwiftUI Previews.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["container.myServiceType","    .onPreview { MockService() }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Which obviously makes your preview code itself much simpler."}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        ContentView()","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"You can, of course, still use the mechanisms shown in ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"text":"• onDebug","type":"heading","anchor":"-onDebug"},{"inlineContent":[{"text":"Triggered whenever your application is running in debug mode in simulators, on a device, or when running unit tests.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"that there’s no "},{"code":"release","type":"codeVoice"},{"type":"text","text":" context. Just use the standard "},{"type":"codeVoice","code":"register"},{"type":"text","text":" syntax in that case."}]}],"style":"note","type":"aside","name":"Note"},{"level":3,"type":"heading","text":"•  onSimulator \/ onDevice","anchor":"-onSimulator--onDevice"},{"type":"paragraph","inlineContent":[{"text":"Pretty apparent. What may not be so apparent, however, is that unlike all of the above these two contexts are also available in release builds.","type":"text"}]},{"text":"• onArg","level":3,"type":"heading","anchor":"-onArg"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"arg","type":"codeVoice"},{"type":"text","text":" context is a powerful tool to have when you want to UITest your application and you want to change its behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As shown in the "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","isActive":true,"type":"reference"},{"text":" section the test case itself is pretty standard.","type":"text"}]},{"code":["import XCTest","","final class FactoryDemoUITests: XCTestCase {","    func testExample() throws {","        let app = XCUIApplication()","        app.launchArguments.append(\"mock1\")","        app.launch()","","        let welcome = app.staticTexts[\"Mock Number 1! for Michael\"]","        XCTAssert(welcome.exists)","    }","}   "],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The shortcut comes in the application itself when we want to check the launch arguments to see what registrations we might want to change.","type":"text"}]},{"syntax":"swift","code":["import Foundation","import Factory","","extension Container: AutoRegistering {","    public func autoRegister() {","        #if DEBUG","        myServiceType","            .onArg(\"mock0\") { EmptyService() }","            .onArg(\"mock1\") { MockServiceN(1) }","            .onArg(\"error\") { MockError(404) }","        #endif","    }","}"],"type":"codeListing"},{"level":3,"type":"heading","text":"• onArgs","anchor":"-onArgs"},{"inlineContent":[{"text":"Similar to arg, but let’s you use the same factory when any of several arguments are passed.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["myServiceType","    .onArgs([\"mock0\", \"mock1\", \"mock3\"]) { ","        EmptyService()","    }"],"type":"codeListing"},{"type":"heading","text":"Runtime Arguments","anchor":"Runtime-Arguments","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also add and remove your own arguments at runtime. Consider this…"}]},{"type":"codeListing","syntax":"swift","code":["FactoryContext.setArg(\"light\", forKey: \"theme\")","FactoryContext.removeArg(forKey: \"theme\")","","myStyleSystem { StandardTheme() }","    .onArg(\"light\") { LightTheme() }","    .onArg(\"dark\") { DarkTheme() }"]},{"anchor":"Multiple-Contexts","level":2,"text":"Multiple Contexts","type":"heading"},{"inlineContent":[{"type":"text","text":"As you may have noticed above in the "},{"type":"codeVoice","code":"arg"},{"type":"text","text":" example, chaining multiple contexts together work just as you’d expect and are specified using Factory’s modifier syntax."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of specifying separate services depending on context.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["container.myServiceType","    .onPreview { MockService() }","    .onTest { UnitTestMockService() }"]},{"type":"paragraph","inlineContent":[{"text":"And here’s an example saying we want the same dependency under multiple contexts.","type":"text"}]},{"syntax":"swift","code":["container.myServiceType","    .context(.simulator, .test) { MockService() }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Which brings us to…"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Context Precedence","anchor":"Context-Precedence"},{"inlineContent":[{"type":"text","text":"Registering multiple contexts could lead one to wonder just which one will be used in a situation where multiple contexts apply. Here’s the order of evaluation."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"arg[s]"}],"type":"strong"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"preview"}]},{"type":"text","text":" *"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"test"}]},{"text":" *","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"simulator"}]}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"device"}],"type":"strong"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"debug"}],"type":"strong"},{"type":"text","text":" *"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"registered factory","type":"text"}]},{"text":" (if any)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"original factory","type":"text"}]}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that any context marked with an asterisk (*) is only available in a DEBUG build. The executable functionality is stripped from release builds."}]},{"type":"heading","level":2,"text":"Global Context","anchor":"Global-Context"},{"inlineContent":[{"type":"text","text":"Keep in mind that contexts are global. The entire app is running in debug more or it’s not. It was passed a “mock0” argument at runtime or it wasn’t."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"onArg","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"onDebug"},{"text":" and other context modifiers basically define how the app should respond to that particular context.","type":"text"}],"type":"paragraph"},{"text":"Changing a Context","anchor":"Changing-a-Context","level":2,"type":"heading"},{"inlineContent":[{"text":"Keep in mind that if we ever want to change a Factory’s context but that Factory defines a scope, then we’re also going to need to ","type":"text"},{"inlineContent":[{"type":"text","text":"manually"}],"type":"strong"},{"text":" clear the scope cache for that object.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Container.shared.myService","    .onTest { NullAnalyticsEngine() }","    .reset(.scope)"],"type":"codeListing"},{"type":"aside","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"code":"reset","type":"codeVoice"},{"text":" make sure you specify that you only want to clear the scope. Calling ","type":"text"},{"code":"reset","type":"codeVoice"},{"type":"text","text":" without a parameter clears everything, including contexts like the one you just set!"}]}],"style":"warning"},{"inlineContent":[{"text":"See the section on ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"The Factory Wins"}]},{"text":" in ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","isActive":true,"type":"reference"},{"type":"text","text":" for more information on this and other scenarios."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Contexts","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/factory\/contexts"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true,"title":"Development and Testing"}],"references":{"doc://Factory/documentation/Factory/Previews":{"role":"article","title":"SwiftUI Previews","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","kind":"article","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"url":"\/documentation\/factory\/previews","type":"topic"},"doc://Factory/documentation/Factory/Debugging":{"role":"article","title":"Debugging","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","kind":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"url":"\/documentation\/factory\/debugging","type":"topic"},"doc://Factory/documentation/Factory/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"type":"topic","role":"article","url":"\/documentation\/factory\/chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","title":"Circular Dependency Chains"},"doc://Factory/documentation/Factory/Testing":{"url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"title":"Testing","role":"article","type":"topic"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","title":"Factory Modifiers"}}}