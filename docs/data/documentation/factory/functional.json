{"abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"sections":[],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Factory"}],"title":"Functional Injection"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}]},{"type":"heading","level":2,"anchor":"Example","text":"Example"},{"inlineContent":[{"text":"Consider the following typealias and Factory.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}]},{"code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"inlineContent":[{"type":"text","text":"Now consider how easy it is to write a test with mock accounts…"}],"type":"paragraph"},{"syntax":"swift","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or test edge cases like no accounts found.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Or test specific error cases.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"type":"reference","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","isActive":true}]}]}],"seeAlsoSections":[{"title":"Advanced Topics","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Functional"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory/Tags":{"url":"\/documentation\/factory\/tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","role":"article","kind":"article","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"type":"topic","title":"Tags"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"title":"Factory and Functional Dependency Injection","type":"link","titleInlineContent":[{"text":"Factory and Functional Dependency Injection","type":"text"}],"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","role":"article","kind":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"type":"topic","title":"Designing Factory"},"doc://Factory/documentation/Factory/Modules":{"url":"\/documentation\/factory\/modules","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","role":"article","kind":"article","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic","title":"Modular Development"},"doc://Factory/documentation/Factory/Optionals":{"url":"\/documentation\/factory\/optionals","identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","role":"article","kind":"article","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"type":"topic","title":"Optionals and Dynamic Registration"},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","role":"article","type":"topic","url":"\/documentation\/factory\/modifiers"},"doc://Factory/documentation/Factory/Cycle":{"url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","role":"article","kind":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"type":"topic","title":"Resolution Cycles"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"}}}