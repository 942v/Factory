{"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"modules":[{"name":"Factory"}],"role":"article","title":"Circular Dependency Chains","roleHeading":"Article"},"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"],"generated":true,"title":"Development and Testing"}],"abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Circular Dependency Chain Detection","anchor":"Circular-Dependency-Chain-Detection","level":2,"type":"heading"},{"inlineContent":[{"text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Examine the following class definitions.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"]},{"inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"code":"CircularA","type":"codeVoice"},{"text":" is going to result in an infinite loop.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This is a circular dependency chain."}],"type":"paragraph"},{"anchor":"Resolution","type":"heading","level":2,"text":"Resolution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}]},{"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"With the above information in hand we should be able to find the problem and fix it."}],"type":"paragraph"},{"inlineContent":[{"text":"We could fix things by changing CircularC’s injection wrapper to ","type":"text"},{"type":"codeVoice","code":"LazyInjected"},{"type":"text","text":" or, better yet, "},{"code":"WeakLazyInjected","type":"codeVoice"},{"text":" in order to avoid a retain cycle.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But a better solution would probably entail finding and breaking out the functionality that "},{"code":"CircularA","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"CircularC","type":"codeVoice"},{"text":" are depending upon into a ","type":"text"},{"inlineContent":[{"type":"text","text":"third"}],"type":"emphasis"},{"text":" object they both could include.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided.","type":"text"}]},{"type":"aside","name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance.","type":"text"}]}]},{"type":"heading","level":2,"text":"Disabling CDC Detection","anchor":"Disabling-CDC-Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"type":"codeListing","code":["Container.shared.manager.dependencyChainTestMax = 0"],"syntax":"swift"},{"inlineContent":[{"text":"The default value for ","type":"text"},{"type":"codeVoice","code":"dependencyChainTestMax"},{"text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This value can be increased (or decreased) as needed."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/chains"]}],"references":{"doc://Factory/documentation/Factory/Previews":{"title":"SwiftUI Previews","url":"\/documentation\/factory\/previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","type":"topic","role":"article"},"doc://Factory/documentation/Factory/Debugging":{"title":"Debugging","url":"\/documentation\/factory\/debugging","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","type":"topic","role":"article"},"doc://Factory/documentation/Factory/Contexts":{"abstract":[{"type":"text","text":"Changing injection results under special circumstances."}],"type":"topic","role":"article","title":"Contexts","kind":"article","url":"\/documentation\/factory\/contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","url":"\/documentation\/factory\/testing","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","type":"topic","role":"article"}}}