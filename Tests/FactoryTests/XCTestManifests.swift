#if !canImport(ObjectiveC)
import XCTest

extension FactoryComponentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryComponentTests = [
        ("testFactoryKey", testFactoryKey),
        ("testFactoryKeyEdgeCases", testFactoryKeyEdgeCases),
        ("testScopeCache", testScopeCache),
    ]
}

extension FactoryContainerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryContainerTests = [
        ("testConvenienceFunctions", testConvenienceFunctions),
        ("testDecorators", testDecorators),
        ("testIsEmpty", testIsEmpty),
        ("testPushPop", testPushPop),
        ("testReset", testReset),
    ]
}

extension FactoryContextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryContextTests = [
        ("testChaining", testChaining),
        ("testDebugWithNoPreviewNoTest", testDebugWithNoPreviewNoTest),
        ("testDefaultRunningUnitTest", testDefaultRunningUnitTest),
        ("testNoPreviewNoTest", testNoPreviewNoTest),
        ("testResettingContainer", testResettingContainer),
        ("testResettingContainerContexts", testResettingContainerContexts),
        ("testResettingContainerContextsWithOnce", testResettingContainerContextsWithOnce),
        ("testResettingContainerRegistrations", testResettingContainerRegistrations),
        ("testResettingContext1", testResettingContext1),
        ("testResettingContext2", testResettingContext2),
        ("testRuntimeArgFunctions", testRuntimeArgFunctions),
        ("testUnmatchedArgument", testUnmatchedArgument),
        ("testWithArgument", testWithArgument),
        ("testWithArguments", testWithArguments),
        ("testWithDevice", testWithDevice),
        ("testWithPreview", testWithPreview),
        ("testWithSimulator", testWithSimulator),
        ("testWithTest", testWithTest),
    ]
}

extension FactoryCoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryCoreTests = [
        ("testBasicResolution", testBasicResolution),
        ("testBasicResolutionOverride", testBasicResolutionOverride),
        ("testBasicResolutionOverrideReset", testBasicResolutionOverrideReset),
        ("testCircularDependencyFailure", testCircularDependencyFailure),
        ("testExplicitlyUnrwappedOptionalResolution", testExplicitlyUnrwappedOptionalResolution),
        ("testFactoryDecorators", testFactoryDecorators),
        ("testFactoryOnce", testFactoryOnce),
        ("testGlobalResolutionFunctions", testGlobalResolutionFunctions),
        ("testOptionalResolution", testOptionalResolution),
        ("testPromisedParameterRegistrationAndOptionalResolution", testPromisedParameterRegistrationAndOptionalResolution),
        ("testPromisedRegistrationAndOptionalResolution", testPromisedRegistrationAndOptionalResolution),
        ("testResetOptions", testResetOptions),
        ("testStrictParameterPromise", testStrictParameterPromise),
        ("testStrictPromise", testStrictPromise),
        ("testTrace", testTrace),
        ("testUnsugaredResolution", testUnsugaredResolution),
    ]
}

extension FactoryDefectTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryDefectTests = [
        ("testAutoRegistrationAndSingletonCache", testAutoRegistrationAndSingletonCache),
        ("testCircularDependencyFailure", testCircularDependencyFailure),
        ("testContextClearingScope", testContextClearingScope),
        ("testDuplicateTypeDistinctResolution", testDuplicateTypeDistinctResolution),
        ("testLazyInjectionOccursOnce", testLazyInjectionOccursOnce),
        ("testNilScopedService", testNilScopedService),
        ("testProtocolSharedScope", testProtocolSharedScope),
        ("testProtocolSharedValueScope", testProtocolSharedValueScope),
        ("testRegistrationClearsScope", testRegistrationClearsScope),
        ("testRegistrationOverridenByAutoRegistration", testRegistrationOverridenByAutoRegistration),
        ("testSingletondScopeLocking", testSingletondScopeLocking),
    ]
}

extension FactoryFunctionalTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryFunctionalTests = [
        ("testMockFuctionality", testMockFuctionality),
        ("testOpenFuctionality", testOpenFuctionality),
    ]
}

extension FactoryInjectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryInjectionTests = [
        ("testBasicInjection", testBasicInjection),
        ("testInjectedObject", testInjectedObject),
        ("testInjectedType", testInjectedType),
        ("testInjectionResolve", testInjectionResolve),
        ("testInjectionSet", testInjectionSet),
        ("testLazyInjection", testLazyInjection),
        ("testLazyInjectionOccursOnce", testLazyInjectionOccursOnce),
        ("testLazyInjectionResolve", testLazyInjectionResolve),
        ("testLazyInjectionSet", testLazyInjectionSet),
        ("testOptionalInjection", testOptionalInjection),
        ("testWeakLazyInjection", testWeakLazyInjection),
        ("testWeakLazyInjectionProtocol", testWeakLazyInjectionProtocol),
        ("testWeakLazyInjectionResolve", testWeakLazyInjectionResolve),
        ("testWeakLazyInjectionSet", testWeakLazyInjectionSet),
    ]
}

extension FactoryMultithreadingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryMultithreadingTests = [
        ("testMultiThreading", testMultiThreading),
    ]
}

extension FactoryParameterTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryParameterTests = [
        ("testParameterRegistrationsAndResolutions", testParameterRegistrationsAndResolutions),
        ("testParameterServiceResolutions", testParameterServiceResolutions),
        ("testScopedParameterServiceReset", testScopedParameterServiceReset),
        ("testScopedParameterServiceResolutions", testScopedParameterServiceResolutions),
    ]
}

extension FactoryResolverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryResolverTests = [
        ("testBasicResolve", testBasicResolve),
        ("testFactoryScope", testFactoryScope),
        ("testResolvingScope", testResolvingScope),
    ]
}

extension FactoryScopeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactoryScopeTests = [
        ("testCachedScope", testCachedScope),
        ("testCachedScopeAutoRelease", testCachedScopeAutoRelease),
        ("testCachedScopeGlobalReset", testCachedScopeGlobalReset),
        ("testCustomCachedScope", testCustomCachedScope),
        ("testDeprectatedRegisteringNewScope", testDeprectatedRegisteringNewScope),
        ("testEmptyOptionalCachedScope", testEmptyOptionalCachedScope),
        ("testExplicitProtocolSharedScope", testExplicitProtocolSharedScope),
        ("testExplicitUniqueScope", testExplicitUniqueScope),
        ("testGraphScope", testGraphScope),
        ("testImplementsGraphScope", testImplementsGraphScope),
        ("testInferredProtocolSharedScope", testInferredProtocolSharedScope),
        ("testNilScopedServiceCaching", testNilScopedServiceCaching),
        ("testNilService", testNilService),
        ("testNilSharedServiceCaching", testNilSharedServiceCaching),
        ("testOptionalCachedScope", testOptionalCachedScope),
        ("testOptionalSharedScope", testOptionalSharedScope),
        ("testOptionalValueSharedScope", testOptionalValueSharedScope),
        ("testRegisteringNewScope", testRegisteringNewScope),
        ("testSharedScope", testSharedScope),
        ("testSharedScopeAutoRelease", testSharedScopeAutoRelease),
        ("testSharedScopeGlobalReset", testSharedScopeGlobalReset),
        ("testSingletonAcrossContainerTypes", testSingletonAcrossContainerTypes),
        ("testSingletonSameContainerType", testSingletonSameContainerType),
        ("testSingletonScope", testSingletonScope),
        ("testSingletonScopeGlobalReset", testSingletonScopeGlobalReset),
        ("testSingletonScopeTimeToLive", testSingletonScopeTimeToLive),
        ("testUniqueScope", testUniqueScope),
        ("testValueCachedScope", testValueCachedScope),
        ("testValueSharedScope", testValueSharedScope),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(FactoryComponentTests.__allTests__FactoryComponentTests),
        testCase(FactoryContainerTests.__allTests__FactoryContainerTests),
        testCase(FactoryContextTests.__allTests__FactoryContextTests),
        testCase(FactoryCoreTests.__allTests__FactoryCoreTests),
        testCase(FactoryDefectTests.__allTests__FactoryDefectTests),
        testCase(FactoryFunctionalTests.__allTests__FactoryFunctionalTests),
        testCase(FactoryInjectionTests.__allTests__FactoryInjectionTests),
        testCase(FactoryMultithreadingTests.__allTests__FactoryMultithreadingTests),
        testCase(FactoryParameterTests.__allTests__FactoryParameterTests),
        testCase(FactoryResolverTests.__allTests__FactoryResolverTests),
        testCase(FactoryScopeTests.__allTests__FactoryScopeTests),
    ]
}
#endif
