{"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory"]]},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"An object or service of the desired type.","type":"text"}]}],"kind":"content"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To resolve the Factory  one simply calls the Factory as a function. Here we use the "},{"code":"shared","type":"codeVoice"},{"text":" container that’s provided for each","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and every container type."}]},{"code":["let service = Container.shared.service()"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The resolved instance may be brand new or Factory may return a cached value from the specified ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re passing an instance of a container around to your views or view models, just call it directly."}]},{"code":["let service = container.service()"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Finally, you can also use the @Injected property wrapper and specify a keyPaths to the desired dependency.","type":"text"}],"type":"paragraph"},{"code":["@Injected(\\.service) var service: ServiceType"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Unless otherwise specified, the @Injected property wrapper looks for dependencies in the standard shared container provided by Factory,"},{"type":"text","text":" "},{"text":"so the above example is functionally identical to the ","type":"text"},{"code":"Container.shared.service()","type":"codeVoice"},{"type":"text","text":" example shown earlier. Here’s one pointing to"},{"text":" ","type":"text"},{"type":"text","text":"your own container."}],"type":"paragraph"},{"type":"codeListing","code":["@Injected(\\MyCustomContainer.service) var service: ServiceType"],"syntax":"swift"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()"},"sections":[],"metadata":{"role":"symbol","roleHeading":"Instance Method","symbolKind":"method","title":"callAsFunction()","externalID":"s:7FactoryAAV14callAsFunctionxyF","modules":[{"name":"Factory"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"variants":[{"paths":["\/documentation\/factory\/factory\/callasfunction()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/Scope":{"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factory\/scope","title":"Scope","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Singleton"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Cached"},{"type":"text","text":", "},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Factory":{"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","type":"topic","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"url":"\/documentation\/factory\/factory","kind":"symbol","title":"Factory","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","title":"callAsFunction()","type":"topic"}}}