{"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"],"title":"Conforms To","kind":"relationships"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"return a previously cached value from the specified scope."}],"type":"paragraph"},{"type":"heading","anchor":"Defining-a-Factory","level":2,"text":"Defining a Factory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"type":"codeVoice","code":"ServiceType"},{"text":". To do that we need to extend a Factory ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" and within","type":"text"},{"type":"text","text":" "},{"text":"that container we define a new computed variable of type ","type":"text"},{"code":"Factory<ServiceType>","type":"codeVoice"},{"text":". The type must be explicitly defined, and is usually a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocol to which the returned dependency conforms."}]},{"syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with","type":"text"},{"type":"text","text":" "},{"text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(see "},{"code":"callAsFunction()","type":"codeVoice"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"]},{"type":"heading","anchor":"Transient","level":2,"text":"Transient"},{"inlineContent":[{"text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has"},{"text":" ","type":"text"},{"type":"text","text":"been served."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Other operations exist for Factory. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","isActive":true},{"text":".","type":"text"}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"title":"Default Implementations","generated":true}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Factory"}],"symbolKind":"struct","title":"Factory","modules":[{"name":"Factory"}],"role":"symbol","roleHeading":"Structure","externalID":"s:7FactoryAAV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory/Factory/resolve()":{"url":"\/documentation\/factory\/factory\/resolve()","kind":"symbol","type":"topic","title":"resolve()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"},"doc://Factory/documentation/Factory/Factory/registration":{"url":"\/documentation\/factory\/factory\/registration","kind":"symbol","type":"topic","title":"registration","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"registration","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"type":"text","text":" "},{"text":"and others.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"url":"\/documentation\/factory\/factory\/register(factory:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Registers a new factory closure capable of producing an object or service of the desired type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","title":"register(factory:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"url":"\/documentation\/factory\/factory\/callasfunction()","kind":"symbol","title":"callAsFunction()","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"type":"text","text":" "},{"text":"return a cached value from the specified scope.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()"},"doc://Factory/documentation/Factory/Factory":{"url":"\/documentation\/factory\/factory","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"type":"topic","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","kind":"article","url":"\/documentation\/factory\/factory\/factorymodifying-implementations","type":"topic","abstract":[],"title":"FactoryModifying Implementations"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","type":"topic"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"role":"symbol","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}],"url":"\/documentation\/factory\/factory\/init(_:key:_:)","title":"init(_:key:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"ManagedContainer","kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}]},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"}}}