{"kind":"article","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"generated":true,"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"]}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Factory"}],"title":"Sample Resolutions"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Shared-Class-Container","level":3,"type":"heading","text":"Shared Class Container"},{"inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the classic Service Locator pattern updated for Factory 2.0."}]},{"anchor":"Initialization-from-Passed-Container","text":"Initialization from Passed Container","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and initializing service from that container.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"level":3,"type":"heading","anchor":"Lazy-Initialization-from-Passed-Container","text":"Lazy Initialization from Passed Container"},{"inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"],"syntax":"swift"},{"text":"Injected Property Wrappers","type":"heading","level":3,"anchor":"Injected-Property-Wrappers"},{"inlineContent":[{"type":"text","text":"Using the "},{"type":"codeVoice","code":"@Injected"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"@LazyInjected"},{"text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by ","type":"text"},{"code":"EnvironmentObject","type":"codeVoice"},{"type":"text","text":" in SwiftUI."}],"type":"paragraph"},{"code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected"},{"text":", ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","type":"reference","isActive":true},{"text":", and ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","isActive":true,"type":"reference"},{"type":"text","text":" for more."}]},{"type":"heading","anchor":"Global-Keypath-Resolution-from-Shared-Container","text":"Global Keypath Resolution from Shared Container","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory provides two global functions that utilize keypaths for resolution."}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end result is identical to using a keypath with the @Injected property wrapper."}]},{"type":"heading","anchor":"Parameterized-Initialization-from-Passed-Container","level":3,"text":"Parameterized Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}]},{"code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true,"type":"reference"},{"text":" for more details.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Classic-Factory-from-Static-Class-Member","text":"Classic Factory from Static Class Member","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","isActive":true}],"type":"paragraph"},{"text":"Composition Root","type":"heading","anchor":"Composition-Root","level":3},{"inlineContent":[{"text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}]}],"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/resolutions"]}],"sections":[],"references":{"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","url":"\/documentation\/factory\/parameterfactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","role":"symbol","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://Factory/documentation/Factory/GettingStarted":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","title":"Getting Started","type":"topic","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory/Registrations":{"title":"Sample Registrations","kind":"article","url":"\/documentation\/factory\/registrations","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","role":"article"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WeakLazyInjected"}],"type":"topic","title":"WeakLazyInjected","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factory\/weaklazyinjected"},"doc://Factory/documentation/Factory/LazyInjected":{"title":"LazyInjected","kind":"symbol","url":"\/documentation\/factory\/lazyinjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","role":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","navigatorTitle":[{"text":"Injected","kind":"identifier"}],"title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Injected","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"url":"\/documentation\/factory\/injected","type":"topic"},"doc://Factory/documentation/Factory/InjectedObject":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectedObject","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"title":"InjectedObject","role":"symbol","url":"\/documentation\/factory\/injectedobject"}}}