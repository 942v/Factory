{"kind":"article","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"type":"heading","anchor":"Dynamic-Registration","level":2,"text":"Dynamic Registration"},{"type":"paragraph","inlineContent":[{"text":"Consider the following optional factory.","type":"text"}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example:"}]},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}]},{"type":"heading","level":2,"text":"Explicitly Unwrapped Optionals","anchor":"Explicitly-Unwrapped-Optionals"},{"inlineContent":[{"text":"Note that you ","type":"text"},{"inlineContent":[{"type":"text","text":"could"}],"type":"emphasis"},{"type":"text","text":" explicitly unwrap the optional…"}],"type":"paragraph"},{"syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing"},{"inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"code":"@OptionalInjected","type":"codeVoice"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"text":"removes any cached dependency from its associated scope.","type":"text"}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}],"type":"paragraph"},{"type":"heading","anchor":"Optionals-and-Multiple-Modules","text":"Optionals and Multiple Modules","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","isActive":true},{"text":" for more.","type":"text"}]}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true,"title":"Advanced Topics"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/optionals"]}],"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Factory"}],"title":"Optionals and Dynamic Registration"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Optionals","interfaceLanguage":"swift"},"references":{"doc://Factory/documentation/Factory/Design":{"type":"topic","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","kind":"article","url":"\/documentation\/factory\/design","role":"article","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}]},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","title":"Resolution Cycles","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","url":"\/documentation\/factory\/cycle","role":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}]},"doc://Factory/documentation/Factory/Modules":{"type":"topic","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","kind":"article","url":"\/documentation\/factory\/modules","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}]},"doc://Factory/documentation/Factory/Functional":{"type":"topic","title":"Functional Injection","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","kind":"article","url":"\/documentation\/factory\/functional","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}]},"doc://Factory/documentation/Factory/Tags":{"type":"topic","title":"Tags","kind":"article","role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"url":"\/documentation\/factory\/tags","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"type":"topic","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article","url":"\/documentation\/factory\/modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","title":"Factory Modifiers"}}}