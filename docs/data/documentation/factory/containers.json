{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Factory 1.0 a “Container” was just a namespace. In 2.0 Containers can be created, referenced, passed around, and deallocated as needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Containers are used by Factory to manage object creation, object resolution, and object lifecycles in general."}]},{"anchor":"Containers-and-Factorys","level":2,"type":"heading","text":"Containers and Factory’s"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory’s are defined within container extensions, and must be provided with a reference to that container on initialization."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Containers also provides a set of “helper” functions that will make a properly bound Factory for us."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var convenientService: Factory<MyServiceType> {","        makes { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you’ve added a Factory to a container you can resolve it."}]},{"type":"codeListing","syntax":"swift","code":["let service = Container.shared.service()"]},{"anchor":"The-Default-Container","level":2,"type":"heading","text":"The Default Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory ships with a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" already constructed for your convenience."}]},{"type":"codeListing","syntax":"swift","code":["public final class Container: SharedContainer {","    public static var shared = MyContainer()","    public var manager = ContainerManager()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve seen it used and extended in all of the examples we’ve seen thus far."}]},{"anchor":"Containershared","level":2,"type":"heading","text":"Container.shared"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As the default Container definition shows, each container class defined has a statically allocated "},{"type":"codeVoice","code":"shared"},{"type":"text","text":" instance associated with it."}]},{"type":"codeListing","syntax":"swift","code":["let service = Container.shared.service()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This instance can be referenced directly, or you can use it as an application root container and pass it along to whereever it’s needed. Let’s take a look."}]},{"anchor":"Passing-Containers","level":2,"type":"heading","text":"Passing Containers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Containers can be passed along from object to object."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of passing an instance of a container to a view model and then initializing a service from that container."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service2: MyServiceType","    init(container: Container) {","        service2 = container.service()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Addtional examples and methods can be seen on the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions"},{"type":"text","text":" page."}]},{"anchor":"SharedContainer","level":2,"type":"heading","text":"SharedContainer"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container"},{"type":"text","text":" defined conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SharedContainer defines the capaabilities each container must provide, as well as providing a bit of default functionality for each container, like the afrementioned "},{"type":"codeVoice","code":"makes"},{"type":"text","text":" convenience function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you can extend SharedContainer with your own Factory’s."}]},{"type":"codeListing","syntax":"swift","code":["extension SharedContainer {","    var commonSerice: Factory<ServiceType> {","        makes { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"commonSerice"},{"type":"text","text":" Factory will now be available on every container created."}]},{"type":"codeListing","syntax":"swift","code":["let common1 = Container.shared.commonService()","let common2 = MyContainer.shared.commonService()"]},{"anchor":"Custom-Containers","level":2,"type":"heading","text":"Custom Containers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’d like to define your own container class you can! Just use the following as a template."}]},{"type":"codeListing","syntax":"swift","code":["public final class MyContainer: SharedContainer {","     public static var shared = MyContainer()","     public var manager = ContainerManager()","}","","extension MyContainer {","    var cachedService: Factory<ServiceType> {","        makes { MyService() }.cached","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A contaimer must derive from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer"},{"type":"text","text":", have its own "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager"},{"type":"text","text":" and implement a static "},{"type":"codeVoice","code":"shared"},{"type":"text","text":" instance."}]},{"anchor":"Injected-Property-Wrappers","level":2,"type":"heading","text":"Injected Property Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Property wrappers like @Injected always reference the "},{"type":"codeVoice","code":"shared"},{"type":"text","text":" container for that class type. Let’s get an instance of the "},{"type":"codeVoice","code":"cachedService"},{"type":"text","text":" object we defined above by providing a keypath to the desired class and service."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    @Injected(\\MyContainer.cachedService) var cachedService","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now have an instance of "},{"type":"codeVoice","code":"cachedService"},{"type":"text","text":" in our view model, as well as a reference to the same instance cached in "},{"type":"codeVoice","code":"MyContainer.shared.manager"},{"type":"text","text":"."}]},{"anchor":"Registration-and-Scope-Management","level":2,"type":"heading","text":"Registration and Scope Management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned earlier, registrations and scopes are managed by the container on which the dependency was created."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a container ever goes out of scope, so will all of its registrations and cached objects."}]}],"type":"aside","name":"Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To demonstrate, let’s create and assign a new container to "},{"type":"codeVoice","code":"MyContainer.shared"},{"type":"text","text":". Doing so releases the provious container, along with any registrations or objects that container may have cached. We’ll use the "},{"type":"codeVoice","code":"cachedService"},{"type":"text","text":" Factory we defined above."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Creates a service.","let service1 = MyContainer.shared.cachedService()","","\/\/ Now get it again, getting the same instance of our service from the cached scope.","let service2 = MyContainer.shared.cachedService()","","\/\/ Replace the shared container","MyContainer.shared = MyContainer()","","\/\/ Trying again gets a new instance since the old scope cache was released.","let service3 = MyContainer.shared.cachedService()","","\/\/ Doing it one last time will give us the same cached instance we have in service3.","let service4 = MyContainer.shared.cachedService()"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/containers"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Containers","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"kind":"article","metadata":{"roleHeading":"Article","title":"Containers","role":"collectionGroup","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"generated":true}],"references":{"doc://Factory/documentation/Factory/ContainerManager":{"role":"symbol","title":"ContainerManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"abstract":[{"type":"text","text":"ContainerManager encapsulates and manages the registration, resolution, and scope caching mechanisms for a given container."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"url":"\/documentation\/factory\/containermanager"},"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","title":"Scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","kind":"article","type":"topic","url":"\/documentation\/factory\/scopes"},"doc://Factory/documentation/Factory/SharedContainer":{"role":"symbol","title":"SharedContainer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SharedContainer"}],"abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"url":"\/documentation\/factory\/sharedcontainer"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/Resolutions":{"role":"article","title":"Sample Resolutions","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","kind":"article","type":"topic","url":"\/documentation\/factory\/resolutions"},"doc://Factory/documentation/Factory/Container":{"role":"symbol","title":"Container","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Container"}],"url":"\/documentation\/factory\/container"}}}