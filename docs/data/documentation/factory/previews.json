{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"variants":[{"paths":["\/documentation\/factory\/previews"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}],"type":"paragraph"},{"text":"SwiftUI Integrations","level":2,"type":"heading","anchor":"SwiftUI-Integrations"},{"inlineContent":[{"text":"Factory can be used in SwiftUI to assign a dependency to a ","type":"text"},{"type":"codeVoice","code":"StateObject"},{"type":"text","text":" or "},{"code":"ObservedObject","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Keep in mind that if you assign to an ","type":"text"},{"type":"codeVoice","code":"ObservedObject"},{"type":"text","text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes)."}],"type":"paragraph"},{"anchor":"SwiftUI-Previews","text":"SwiftUI Previews","type":"heading","level":2},{"inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose.","type":"text"}]},{"text":"Multiple Previews","anchor":"Multiple-Previews","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}]},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","anchor":"InjectedObject","level":2,"text":"InjectedObject"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you prefer, you can also use "},{"type":"codeVoice","code":"InjectedObject"},{"type":"text","text":", an immediate injection property wrapper for SwiftUI ObservableObjects."}]},{"inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"type":"text","text":" "},{"type":"text","text":"and @EnvironmentObject."}],"type":"paragraph"},{"inlineContent":[{"text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service"},{"type":"text","text":" "},{"type":"text","text":"or dependency."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"You have a service that could be consumed from a view or a view model."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","isActive":true,"type":"reference"},{"text":" for more details on graph.","type":"text"}]}]}],"type":"orderedList"},{"type":"heading","level":2,"text":"InjectedObject Previews","anchor":"InjectedObject-Previews"},{"type":"paragraph","inlineContent":[{"text":"Single previews work exactly the same.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing the model to the view directly, we need to create the entire "},{"type":"codeVoice","code":"InjectedObject(model1)"},{"type":"text","text":" pair and pass that."}]},{"text":"Common Setup","anchor":"Common-Setup","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier.","type":"text"}]},{"syntax":"swift","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"],"type":"codeListing"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","metadata":{"role":"article","title":"SwiftUI Previews","modules":[{"name":"Factory"}],"roleHeading":"Article"},"references":{"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","title":"Debugging","url":"\/documentation\/factory\/debugging","type":"topic","role":"article"},"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","url":"\/documentation\/factory\/scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","kind":"article","title":"Scopes"},"doc://Factory/documentation/Factory/Contexts":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","type":"topic","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}],"kind":"article","url":"\/documentation\/factory\/contexts"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Testing":{"title":"Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"url":"\/documentation\/factory\/testing","kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article"},"doc://Factory/documentation/Factory/Chains":{"abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","type":"topic","role":"article"}}}