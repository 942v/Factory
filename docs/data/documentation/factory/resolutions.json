{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Classic-Factory-from-Static-Class-Member","level":3,"type":"heading","text":"Classic Factory from Static Class Member"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing dependency from class. This is classic Service Locator pattern."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"]},{"anchor":"Modern-Factory-from-Shared-Class-Container","level":3,"type":"heading","text":"Modern Factory from Shared Class Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Initializing dependency from shared class container. This is the classic Service Locator pattern updated for Factory 2.0."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"anchor":"Initialization-from-Passed-Container","level":3,"type":"heading","text":"Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and initializing service from that container."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"]},{"anchor":"Lazy-Initialization-from-Passed-Container","level":3,"type":"heading","text":"Lazy Initialization from Passed Container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing an instance of a container to our view model and saving it for later lazy initializers."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6A: MyServiceType = container.sharedService()","    private lazy var service6B: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"anchor":"Injected-Proprty-Wrappers","level":3,"type":"heading","text":"Injected Proprty Wrappers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the @Injected and @LazyInjecter property wrappers to obtain dependencies using an Annotation pattern similar to that used by EnvironmentObject in SwiftUI."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Resolutions","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"seeAlsoSections":[{"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"generated":true}],"references":{"doc://Factory/documentation/Factory/Registrations":{"role":"article","title":"Sample Registrations","abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","kind":"article","type":"topic","url":"\/documentation\/factory\/registrations"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}