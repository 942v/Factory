{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory\/decorator(_:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"]]},"abstract":[{"type":"text","text":"Adds a factory specific decorator. The decorator will be "},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"type":"text","text":" be called with the resolved dependency"},{"text":" ","type":"text"},{"text":"for further examination or manipulation.","type":"text"}],"variants":[{"paths":["\/documentation\/factory\/factory\/decorator(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"decorator"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"decorator","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"This includes previously created items that may have been cached by a scope.","type":"text"}],"type":"paragraph"},{"code":["var decoratedService: Factory<ParentChildService> {","   self { ParentChildService() }","       .decorated {","           $0.child.parent = $0","       }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"As shown, decorator can come in handy when you need to perform some operation or manipulation after the fact."}],"type":"paragraph"}]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"externalID":"s:7Factory0A9ModifyingPAAE9decoratoryxy1TQzcF::SYNTHESIZED::s:7FactoryAAV","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"modules":[{"name":"Factory"}],"extendedModule":"Factory","roleHeading":"Instance Method","title":"decorator(_:)"},"references":{"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","title":"Factory","type":"topic","url":"\/documentation\/factory\/factory","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"role":"symbol"},"doc://Factory/documentation/Factory/Factory/decorator(_:)":{"url":"\/documentation\/factory\/factory\/decorator(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"text":"Adds a factory specific decorator. The decorator will be ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"text":" be called with the resolved dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for further examination or manipulation."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/decorator(_:)","type":"topic","title":"decorator(_:)"},"doc://Factory/documentation/Factory":{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","role":"collection","url":"\/documentation\/factory","title":"Factory"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","title":"FactoryModifying Implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","abstract":[],"url":"\/documentation\/factory\/factory\/factorymodifying-implementations"}}}