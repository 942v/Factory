{"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve","type":"text"},{"type":"text","text":" "},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}]},{"syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/factory\/weaklazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"]]},"sections":[],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Factory"}],"title":"resolvedOrNil()","role":"symbol","externalID":"s:7Factory16WeakLazyInjectedV13resolvedOrNilxSgyF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"references":{"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"},"doc://Factory/documentation/Factory/WeakLazyInjected/resolvedOrNil()":{"url":"\/documentation\/factory\/weaklazyinjected\/resolvedornil()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"role":"symbol","title":"resolvedOrNil()","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected\/resolvedOrNil()","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WeakLazyInjected"}],"type":"topic","title":"WeakLazyInjected","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"role":"symbol","url":"\/documentation\/factory\/weaklazyinjected"}}}