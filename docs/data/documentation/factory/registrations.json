{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Basic","level":3,"type":"heading","text":"Basic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"]},{"anchor":"Scopes","level":3,"type":"heading","text":"Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() } \/\/ unique","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }.singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .decorator { print(\"DECORATING \\($0.id)\") }","            .shared","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A Factory’s scope is unique unless defined otherwise."}]},{"anchor":"Constructor-Injection","level":3,"type":"heading","text":"Constructor Injection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"]},{"anchor":"Parameters","level":3,"type":"heading","text":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of parameterized registration in a Factory 2.0 container."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we also needed to specify the type of our parameter."}]},{"anchor":"Same-Types","level":3,"type":"heading","text":"Same Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"]},{"anchor":"Static-Factories","level":3,"type":"heading","text":"Static Factories"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of static Factory 2.0 registration container."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    static var oldSchool: Factory<School> {","        Self.shared { School() }","    }","}","","let school = Container.oldSchool"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we had to give the Factory a reference to the class “shared” container. That container will manage the registrations and scopes for any such Factory."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"can"}]},{"type":"text","text":" create static Factory’s’, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected"},{"type":"text","text":" property wrappers due to the lack of keyPaths."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var newSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.shared.newSchool"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Registrations","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Registrations","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"seeAlsoSections":[{"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolutions"],"generated":true}],"references":{"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article","type":"topic","url":"\/documentation\/factory\/gettingstarted"},"doc://Factory/documentation/Factory/Injected":{"role":"symbol","title":"Injected","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injected"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factory\/injected"},"doc://Factory/documentation/Factory/Resolutions":{"role":"article","title":"Sample Resolutions","abstract":[{"type":"text","text":"There are many ways to use Factory to resolve dependencies. Here are a few examples."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","kind":"article","type":"topic","url":"\/documentation\/factory\/resolutions"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}