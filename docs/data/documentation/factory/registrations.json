{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Basic","level":3,"anchor":"Basic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}]},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This registered dependency returns a new, unique version of ","type":"text"},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}]},{"type":"paragraph","inlineContent":[{"text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We prefer the more concise version, and that’s what we’ll use going forward."}]},{"content":[{"inlineContent":[{"text":"The container helper functions are ","type":"text"},{"type":"codeVoice","code":"@inlinable"},{"text":" and as such there’s no performance penalty incurred when calling them.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"anchor":"Scopes","type":"heading","level":3,"text":"Scopes"},{"inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"syntax":"swift"},{"type":"heading","text":"Constructor Injection","anchor":"Constructor-Injection","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"]},{"level":3,"anchor":"Parameters","text":"Parameters","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"reference"},{"type":"text","text":"."}]},{"type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that we also needed to specify the type of our parameter.","type":"text"}]},{"type":"heading","level":3,"text":"Same Types","anchor":"Same-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type."}]},{"type":"codeListing","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"syntax":"swift"},{"text":"Inside Custom Containers","type":"heading","level":3,"anchor":"Inside-Custom-Containers"},{"inlineContent":[{"type":"text","text":"You’ve seen factory registrations done within container "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extensions"}]},{"type":"text","text":", but it should also be noted that we can also create them within our own custom containers."}],"type":"paragraph"},{"type":"codeListing","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"Note the last “lazy” definition of ","type":"text"},{"code":"service2","type":"codeVoice"},{"text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle."}],"type":"paragraph"}],"type":"aside","name":"Warning","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}]},{"level":3,"type":"heading","text":"Static Factory’s","anchor":"Static-Factorys"},{"inlineContent":[{"text":"Example of a static Factory 2.0 registration container.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}]},{"type":"paragraph","inlineContent":[{"text":"While you ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"can"}]},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}],"type":"paragraph"},{"code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"],"syntax":"swift","type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/factory\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Registrations","interfaceLanguage":"swift"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolutions"],"title":"Examples","generated":true}],"metadata":{"roleHeading":"Article","modules":[{"name":"Factory"}],"role":"article","title":"Sample Registrations"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"article","abstract":[{"text":"There are many ways to register dependencies with Factory. Here are a few examples.","type":"text"}],"references":{"doc://Factory/documentation/Factory/Resolutions":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","kind":"article","abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"title":"Sample Resolutions","url":"\/documentation\/factory\/resolutions","role":"article"},"doc://Factory/documentation/Factory/GettingStarted":{"url":"\/documentation\/factory\/gettingstarted","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"type":"topic","title":"Getting Started","role":"collectionGroup"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/ParameterFactory":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","url":"\/documentation\/factory\/parameterfactory","title":"ParameterFactory","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Injected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"title":"Injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"url":"\/documentation\/factory\/injected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}]}}}