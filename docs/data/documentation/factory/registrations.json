{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Basic","level":3,"type":"heading","text":"Basic"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of basic registration in a Factory 2.0 container"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"anchor":"Convenience","level":3,"type":"heading","text":"Convenience"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of basic factory registration using convenience function"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var convenientService: Factory<MyServiceType> {","        factory { MyService() }","    }","}"]},{"anchor":"Scopes","level":3,"type":"heading","text":"Scopes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of scoped services in a Factory 2.0 container"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        factory { MyService() } \/\/ unique","    }","    var cachedService: Factory<MyServiceType> {","        factory { MyService() }.cached","    }","    var singletonService: Factory<SimpleService> {","        factory { SimpleService() }.singleton","    }","    var sharedService: Factory<MyServiceType> {","        factory { MyService() }","            .decorator { print(\"DECORATING \\($0.id)\") }","            .shared","    }","}"]},{"anchor":"Constructor-Injection","level":3,"type":"heading","text":"Constructor Injection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of service with constructor injection that requires another services"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        factory {","            MyConstructedService(service: self.cachedService())","        }","    }","}"]},{"anchor":"Parameters","level":3,"type":"heading","text":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of parameterized functional registration in a Factory 2.0 container"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    func parameterized(_ n: Int) -> Factory<ParameterService> {","        factory { ParameterService(count: n) }","    }","}"]},{"anchor":"Same-Types","level":3,"type":"heading","text":"Same Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of correctly handling multiple instances of the same type"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var string1: Factory<String> {","        factory { \"String 1\" }","    }","    var string2: Factory<String> {","        factory { \"String 2\" }","    }","    var string3: Factory<String> {","        factory { \"String 3\" }","    }","    var string4: Factory<String> {","        factory { \"String 4\" }","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Registrations","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Sample Registrations","role":"article","modules":[{"name":"Factory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"}}}