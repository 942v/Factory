{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specfic the"},{"type":"text","text":" "},{"type":"text","text":"parameter type, and we need to consume the passed parameter in our factory closure."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       unique { ParameterService(value: $0) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the paramter to the Factory."}]},{"type":"codeListing","syntax":"Swift","code":["let myService = Container.shared.parameterService(n)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One caveat is that you can’t use the "},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" property wrapper with "},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":" as there’s no way to get"},{"type":"text","text":" "},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"type":"text","text":" "},{"type":"text","text":"probably need to reference the container directly and do something similar to the following."}]},{"type":"codeListing","syntax":"swift","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}]},{"type":"codeListing","syntax":"swift","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    unique { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"type":"text","text":" "},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/factory\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifing"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"title":"ParameterFactory","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:7Factory09ParameterA0V","modules":[{"name":"Factory"}],"navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:scope:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"]},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(scope:factory:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifing-Implementations"],"generated":true}],"references":{"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","type":"topic","url":"\/documentation\/factory"},"doc://Factory/documentation/Factory/FactoryModifing":{"role":"symbol","title":"FactoryModifing","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryModifing"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifing","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifing"}],"url":"\/documentation\/factory\/factorymodifing"},"doc://Factory/documentation/Factory/ParameterFactory/register(scope:factory:)":{"role":"symbol","title":"register(scope:factory:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Scope","preciseIdentifier":"s:7Factory5ScopeC"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Allows registering new factory closure and updating scope used after the fact."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(scope:factory:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/register(scope:factory:)"},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifing-Implementations":{"role":"collectionGroup","title":"FactoryModifing Implementations","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifing-Implementations","kind":"article","type":"topic","url":"\/documentation\/factory\/parameterfactory\/factorymodifing-implementations"},"doc://Factory/documentation/Factory/ParameterFactory/registration":{"role":"symbol","title":"registration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Required registration"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/registration"},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"role":"symbol","title":"register(factory:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/register(factory:)"},"doc://Factory/documentation/Factory/ParameterFactory":{"role":"symbol","title":"ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParameterFactory"}],"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"role":"symbol","title":"callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:scope:_:)":{"role":"symbol","title":"init(_:key:scope:_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"scope"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Scope","preciseIdentifier":"s:7Factory5ScopeC"},{"kind":"text","text":"?, ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:scope:_:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory\/init(_:key:scope:_:)"}}}