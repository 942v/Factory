{"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true}],"metadata":{"roleHeading":"Article","modules":[{"name":"Factory"}],"role":"article","title":"Optionals and Dynamic Registration"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns.","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"text":"Dynamic Registration","anchor":"Dynamic-Registration","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following optional factory."}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}]},{"type":"codeListing","syntax":"swift","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example:"}]},{"type":"codeListing","syntax":"swift","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"type":"heading","level":2,"text":"Explicitly Unwrapped Optionals","anchor":"Explicitly-Unwrapped-Optionals"},{"inlineContent":[{"type":"text","text":"Note that you "},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"text":" explicitly unwrap the optional…","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"type":"codeListing"},{"inlineContent":[{"text":"But doing so violates the core premise on which Factory was built in the first place: ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}]}],"type":"paragraph"},{"inlineContent":[{"text":"I’d advise against it.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few other things here. First, note that we used "},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And also note that calling register also "},{"type":"emphasis","inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"anchor":"Optionals-and-Multiple-Modules","type":"heading","level":2,"text":"Optionals and Multiple Modules"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},{"type":"text","text":" for more."}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/factory\/optionals"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Optionals"},"kind":"article","sections":[],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"references":{"doc://Factory/documentation/Factory/Functional":{"title":"Functional Injection","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","url":"\/documentation\/factory\/functional","type":"topic","role":"article","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"kind":"article"},"doc://Factory/documentation/Factory/Modules":{"type":"topic","url":"\/documentation\/factory\/modules","role":"article","kind":"article","title":"Modular Development","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}]},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","role":"article","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design"},"doc://Factory/documentation/Factory/Cycle":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"role":"article"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]},"doc://Factory/documentation/Factory/Modifiers":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","title":"Factory Modifiers","url":"\/documentation\/factory\/modifiers","abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"role":"article"},"doc://Factory/documentation/Factory/Tags":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","title":"Tags","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"role":"article"}}}