{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"],"title":"Conforms To","type":"conformsTo"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"variants":[{"paths":["\/documentation\/factory\/parameterfactory"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"title":"Instance Methods"},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use ","type":"text"},{"type":"codeVoice","code":"ParameterFactory"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Resolving it is straightforward. Just pass the parameter to the Factory."}]},{"code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"One caveat is that you can’t use the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" property wrapper with "},{"code":"ParameterFactory","type":"codeVoice"},{"type":"text","text":" as there’s no way to get"},{"text":" ","type":"text"},{"text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll","type":"text"},{"type":"text","text":" "},{"type":"text","text":"probably need to reference the container directly and do something similar to the following."}]},{"type":"codeListing","syntax":"swift","code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"]},{"inlineContent":[{"text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"text":" ","type":"text"},{"type":"text","text":"later requests will be ignored until the factory or scope is reset."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"metadata":{"role":"symbol","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"symbolKind":"struct","title":"ParameterFactory","externalID":"s:7Factory09ParameterA0V","roleHeading":"Structure","modules":[{"name":"Factory"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"role":"symbol","title":"register(factory:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[{"text":"Registers a new factory capable of taking parameters at runtime.","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/register(factory:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","url":"\/documentation\/factory\/parameterfactory","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"type":"topic","role":"symbol","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}]},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"abstract":[],"kind":"article","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations","url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","title":"FactoryModifying Implementations"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"role":"symbol","title":"resolve(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","type":"topic"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"kind":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"role":"symbol","title":"callAsFunction(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"callAsFunction"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Resolves a factory capable of taking parameters at runtime.","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"role":"symbol","title":"init(_:key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7Factory16ManagedContainerP","kind":"typeIdentifier","text":"ManagedContainer"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"text":"Public initializer creates a factory capable of taking parameters at runtime.","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)","type":"topic"},"doc://Factory/documentation/Factory/ParameterFactory/registration":{"role":"symbol","title":"registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"registration"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","abstract":[{"text":"Required registration","type":"text"}],"url":"\/documentation\/factory\/parameterfactory\/registration","type":"topic"},"doc://Factory/documentation/Factory":{"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"title":"Factory","url":"\/documentation\/factory","type":"topic"}}}