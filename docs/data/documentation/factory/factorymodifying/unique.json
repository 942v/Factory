{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"unique","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"code":["var service: Factory<ServiceType> {","    self { MyService() }","        .unique","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you can add the modifier, Factory’s are unique by default."}]}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/unique","interfaceLanguage":"swift"},"sections":[],"metadata":{"symbolKind":"property","modules":[{"name":"Factory"}],"extendedModule":"Factory","role":"symbol","externalID":"s:7Factory0A9ModifyingPAAE6uniquexvp","title":"unique","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"unique","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Instance Property"},"abstract":[{"text":"Syntactic sugar defines defines unique scope. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","isActive":true},{"text":".","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/factory\/factorymodifying\/unique"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/Scope":{"navigatorTitle":[{"text":"Scope","kind":"identifier"}],"url":"\/documentation\/factory\/scope","title":"Scope","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scope","kind":"identifier"}],"abstract":[{"text":"Scopes are used to define the lifetime of resolved dependencies. Factory provides several scope types,","type":"text"},{"type":"text","text":" "},{"text":"including ","type":"text"},{"type":"codeVoice","code":"Singleton"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Cached"},{"type":"text","text":", "},{"code":"Graph","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying/unique":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying\/unique","title":"unique","url":"\/documentation\/factory\/factorymodifying\/unique","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"unique","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"text":"Syntactic sugar defines defines unique scope. See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scope","type":"reference","isActive":true},{"text":".","type":"text"}],"role":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryModifying"}],"url":"\/documentation\/factory\/factorymodifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","title":"FactoryModifying","role":"symbol","type":"topic","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","title":"Factory","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory","kind":"symbol","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}]}}}